version: '3.8'

# Network definitions for security zones
networks:
  zone1_critical:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24
    driver_opts:
      com.docker.network.bridge.name: br_zone1
      
  zone2_core:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.2.0/24
    driver_opts:
      com.docker.network.bridge.name: br_zone2
      
  zone3_app:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.3.0/24
    driver_opts:
      com.docker.network.bridge.name: br_zone3
      
  zone4_dmz:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.4.0/24
    driver_opts:
      com.docker.network.bridge.name: br_zone4

# Shared volumes
volumes:
  vault-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/vault
      
  n8n-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/n8n
      
  knowledge-lake:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/knowledge

services:
  # Zone 1: Critical Infrastructure
  vault:
    image: vault:1.15
    container_name: synapticos-vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - vault-data:/vault/data
      - ./vault/config:/vault/config
      - ./vault/policies:/vault/policies
    networks:
      - zone1_critical
    ports:
      - "8200:8200"
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build: ./api-gateway
    container_name: synapticos-gateway
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    volumes:
      - ./api-gateway/config:/kong/declarative
      - ./api-gateway/plugins:/usr/local/share/lua/5.1/kong/plugins
    networks:
      - zone1_critical
      - zone2_core
      - zone3_app
      - zone4_dmz
    ports:
      - "8000:8000"  # Proxy
      - "8443:8443"  # Proxy SSL
      - "8001:8001"  # Admin API
    depends_on:
      - vault

  n8n:
    image: n8nio/n8n:latest
    container_name: synapticos-n8n
    restart: unless-stopped
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=n8n.synapticos.local
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - WEBHOOK_URL=https://n8n.synapticos.local/
    volumes:
      - n8n-data:/home/node/.n8n
      - ./n8n/custom-nodes:/home/node/.n8n/custom
    networks:
      - zone1_critical
      - zone2_core
    ports:
      - "5678:5678"
    depends_on:
      - vault
      - api-gateway

  # Zone 2: Core Services
  context-engine:
    build: ./services/context-engine
    container_name: synapticos-context
    restart: unless-stopped
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
      - API_KEY_PATH=secret/data/context-engine
    volumes:
      - knowledge-lake:/data/knowledge
      - ./services/context-engine/config:/app/config
    networks:
      - zone2_core
    depends_on:
      - vault
      - api-gateway

  knowledge-db:
    image: postgres:15-alpine
    container_name: synapticos-knowledge-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: knowledge
      POSTGRES_USER: ${KNOWLEDGE_DB_USER}
      POSTGRES_PASSWORD: ${KNOWLEDGE_DB_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - zone2_core
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KNOWLEDGE_DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zone 3: Application Services
  jace-ai:
    build: ./services/jace-ai
    container_name: synapticos-jace
    restart: unless-stopped
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
      - API_GATEWAY=http://api-gateway:8000
    networks:
      - zone3_app
    depends_on:
      - api-gateway
      - context-engine

  speechify:
    build: ./services/speechify
    container_name: synapticos-speechify
    restart: unless-stopped
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
      - API_GATEWAY=http://api-gateway:8000
    volumes:
      - ./data/audio:/data/audio
    networks:
      - zone3_app
    depends_on:
      - api-gateway

  # Zone 4: DMZ Services
  vercel-connector:
    build: ./services/vercel-connector
    container_name: synapticos-vercel
    restart: unless-stopped
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
      - VERCEL_TOKEN_PATH=secret/data/vercel
    networks:
      - zone4_dmz
    depends_on:
      - api-gateway

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: synapticos-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - zone1_critical
      - zone2_core
      - zone3_app
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: synapticos-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./data/grafana:/var/lib/grafana
    networks:
      - zone1_critical
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:latest
    container_name: synapticos-loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki:/etc/loki
      - ./data/loki:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - zone1_critical
      - zone2_core
      - zone3_app
    ports:
      - "3100:3100"

  # Service Mesh Sidecar Injector
  linkerd-proxy-injector:
    image: cr.l5d.io/linkerd/proxy-injector:stable-2.14.1
    container_name: synapticos-linkerd-injector
    restart: unless-stopped
    environment:
      - LINKERD_DISABLED=false
    networks:
      - zone1_critical
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock