# HAProxy Configuration for Syn_OS High Availability
# Provides load balancing and failover capabilities

global
    # Daemon configuration
    daemon
    user haproxy
    group haproxy
    
    # Performance tuning
    maxconn 4096
    nbproc 2
    nbthread 4
    
    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Logging
    log stdout local0 info
    
    # Security
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 15s
    timeout http-keep-alive 15s
    timeout check 3s
    
    # Health check defaults
    option httpchk GET /health
    http-check expect status 200
    
    # Performance
    option splice-auto
    option splice-request
    option splice-response
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json

# Statistics interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats realm Syn_OS\ HAProxy\ Statistics
    stats auth admin:${HAPROXY_STATS_PASSWORD}

# Frontend for HTTPS traffic
frontend syn_os_https
    bind *:443 ssl crt /etc/ssl/certs/syn-os.pem
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # DDoS protection
    http-request set-var(req.concurrent_connections) src,table_conn_cnt(syn_os_https)
    http-request reject if { var(req.concurrent_connections) gt 10 }
    
    # ACL definitions
    acl is_api path_beg /api/
    acl is_consciousness path_beg /consciousness/
    acl is_security path_beg /security/
    acl is_monitoring path_beg /monitoring/
    acl is_health path /health
    
    # Health check bypass
    use_backend health_check if is_health
    
    # Route to appropriate backend
    use_backend api_servers if is_api
    use_backend consciousness_servers if is_consciousness
    use_backend security_servers if is_security
    use_backend monitoring_servers if is_monitoring
    
    # Default backend
    default_backend security_servers

# Frontend for HTTP traffic (redirect to HTTPS)
frontend syn_os_http
    bind *:80
    
    # Security headers even for redirects
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    
    # Redirect all HTTP to HTTPS
    redirect scheme https code 301

# Backend for API/Orchestrator services
backend api_servers
    # Load balancing algorithm
    balance roundrobin
    
    # Health checks
    option httpchk GET /health HTTP/1.1\r\nHost:\ orchestrator
    http-check expect status 200
    
    # Sticky sessions for API consistency
    cookie ORCHESTRATOR_ID insert indirect nocache maxlife 30m
    
    # Server definitions
    server orchestrator-1 orchestrator-1:8080 check cookie orch1 weight 100 maxconn 500
    server orchestrator-2 orchestrator-2:8080 check cookie orch2 weight 100 maxconn 500
    server orchestrator-3 orchestrator-3:8080 check cookie orch3 weight 100 maxconn 500 backup
    
    # Connection pooling
    http-reuse safe
    
    # Timeouts for API calls
    timeout server 60s
    timeout connect 5s

# Backend for Consciousness services
backend consciousness_servers
    # Load balancing for consciousness workloads
    balance leastconn
    
    # Health checks
    option httpchk GET /health HTTP/1.1\r\nHost:\ consciousness
    http-check expect status 200
    
    # No sticky sessions for consciousness (stateless design)
    
    # Server definitions with different weights based on capacity
    server consciousness-1 consciousness-1:8081 check weight 150 maxconn 200
    server consciousness-2 consciousness-2:8081 check weight 150 maxconn 200
    server consciousness-3 consciousness-3:8081 check weight 100 maxconn 150 backup
    
    # Extended timeouts for consciousness processing
    timeout server 120s
    timeout connect 10s
    
    # Queue management for high load
    maxqueue 50

# Backend for Security Dashboard services
backend security_servers
    # Load balancing
    balance source
    
    # Health checks
    option httpchk GET /health HTTP/1.1\r\nHost:\ security
    http-check expect status 200
    
    # Session persistence for security dashboard
    stick-table type string len 32 size 30k expire 30m
    stick match path,lower,word(1,/)
    
    # Server definitions
    server security-1 security-dashboard-1:8083 check weight 100 maxconn 300
    server security-2 security-dashboard-2:8083 check weight 100 maxconn 300
    server security-3 security-dashboard-3:8083 check weight 100 maxconn 300 backup
    
    # Standard timeouts
    timeout server 30s

# Backend for Monitoring services
backend monitoring_servers
    # Load balancing
    balance roundrobin
    
    # Health checks disabled for monitoring (avoid recursive monitoring)
    option httpchk GET /api/v1/status HTTP/1.1\r\nHost:\ prometheus
    
    # Server definitions
    server prometheus prometheus:9090 check weight 100
    server grafana grafana:3000 check weight 100
    server alertmanager alertmanager:9093 check weight 100

# Backend for health checks
backend health_check
    # Simple health response
    mode http
    server health_ok 127.0.0.1:8405 check disabled

# Error pages
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http

# TCP load balancing for database connections
listen postgres_cluster
    bind *:5432
    mode tcp
    balance leastconn
    
    # Health checks for PostgreSQL
    option tcp-check
    tcp-check connect
    tcp-check send-binary 00000000 # PostgreSQL startup packet length
    tcp-check send-binary 00030000 # Protocol version 3.0
    tcp-check send-binary 7573657200 # "user\0"
    tcp-check send-binary 74657374 # "test"
    tcp-check send-binary 00 # \0
    tcp-check send-binary 00 # End of parameters
    tcp-check expect binary 52 # Authentication request
    
    server postgres-primary postgres-primary:5432 check weight 100 maxconn 100
    server postgres-replica postgres-replica:5432 check weight 50 maxconn 50 backup

# TCP load balancing for Redis connections
listen redis_cluster
    bind *:6379
    mode tcp
    balance first
    
    # Health checks for Redis
    option tcp-check
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    
    server redis-master redis-master:6379 check weight 100 maxconn 200
    server redis-sentinel redis-sentinel:26379 check weight 100 maxconn 100 backup

# TCP load balancing for NATS connections
listen nats_cluster
    bind *:4222
    mode tcp
    balance roundrobin
    
    # Health checks for NATS
    option tcp-check
    tcp-check connect
    tcp-check send INFO\r\n
    tcp-check expect string server_id
    
    server nats-1 nats-1:4222 check weight 100 maxconn 1000
    server nats-2 nats-2:4222 check weight 100 maxconn 1000
    server nats-3 nats-3:4222 check weight 100 maxconn 1000