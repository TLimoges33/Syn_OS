[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "synos-development"
version = "1.0.0"
description = "SynOS Development Environment and MCP Servers"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "SynOS Development Team", email = "dev@synos.ai"}
]
keywords = ["synos", "mcp", "development", "security", "consciousness"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Operating Systems",
    "Topic :: Security",
]
requires-python = ">=3.9"
dependencies = [
    "model-context-protocol>=1.0.0",
    "fastmcp>=0.9.0",
    "starlette>=0.47.0",
    "uvicorn>=0.35.0",
    "httpx>=0.28.0",
    "httpx-sse>=0.4.0",
    "pydantic>=2.11.0",
    "pydantic-settings>=2.10.0",
    "jsonschema>=4.25.0",
    "anyio>=4.10.0",
    "python-dotenv>=1.1.0",
    "structlog>=24.1.0",
    "cryptography>=42.0.0",
    "PyJWT>=2.8.0",
    "watchdog>=4.0.0",
    "asyncpg>=0.29.0",
    "aiosqlite>=0.20.0",
    "click>=8.2.0",
    "rich>=13.7.0",
    "typer>=0.12.0",
    "aiofiles>=24.1.0",
    "toml>=0.10.2",
    "PyYAML>=6.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "coverage>=7.5.0",
]
docs = [
    "sphinx>=7.3.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/synos-ai/synos"
Documentation = "https://docs.synos.ai"
Repository = "https://github.com/synos-ai/synos"
Issues = "https://github.com/synos-ai/synos/issues"

[project.scripts]
synos-shell-mcp = "mcp_servers.shell_mcp_server:main"
synos-test-mcp = "mcp_servers.test_simple_mcp_server:main"
synos-security-audit = "mcp.security_audit_server:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["mcp*", "mcp_servers*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | mcp_env
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=mcp_servers",
    "--cov=mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "mcp: marks tests related to MCP functionality",
]

[tool.coverage.run]
source = ["mcp_servers", "mcp"]
omit = [
    "*/tests/*",
    "*/mcp_env/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
