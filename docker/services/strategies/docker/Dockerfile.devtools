# SynOS Development Tools Container
# IDE support, debugging, and profiling tools

FROM ubuntu:22.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install development tools and dependencies
RUN apt-get update && apt-get install -y \
    # Core development tools
    build-essential \
    gcc \
    g++ \
    clang \
    llvm \
    cmake \
    make \
    ninja-build \
    # Debugging tools
    gdb \
    valgrind \
    strace \
    ltrace \
    systemtap \
    perf-tools-unstable \
    # Profiling tools
    linux-tools-generic \
    oprofile \
    google-perftools \
    libgoogle-perftools-dev \
    # Code analysis
    clang-tools \
    clang-tidy \
    clang-format \
    cppcheck \
    shellcheck \
    pylint \
    # Version control
    git \
    git-lfs \
    subversion \
    mercurial \
    # Editor support
    vim \
    neovim \
    emacs \
    nano \
    # Language servers
    clangd \
    python3-pylsp \
    golang-golang-x-tools \
    # Python development
    python3 \
    python3-pip \
    python3-dev \
    python3-venv \
    ipython3 \
    # Node.js development
    nodejs \
    npm \
    yarn \
    # Documentation tools
    doxygen \
    graphviz \
    pandoc \
    sphinx-doc \
    # Container tools
    docker.io \
    docker-compose \
    podman \
    buildah \
    # Networking tools
    netcat \
    tcpdump \
    wireshark \
    nmap \
    curl \
    wget \
    httpie \
    # System monitoring
    htop \
    iotop \
    sysstat \
    dstat \
    && rm -rf /var/lib/apt/lists/*

# Install Python development packages
RUN pip3 install --no-cache-dir \
    jupyter \
    notebook \
    jupyterlab \
    ipykernel \
    ipywidgets \
    black \
    autopep8 \
    mypy \
    pytest \
    pytest-cov \
    tox \
    poetry \
    pipenv \
    virtualenv \
    debugpy \
    rich \
    typer \
    click \
    pydantic \
    fastapi \
    uvicorn

# Install Node.js development packages
RUN npm install -g \
    typescript \
    ts-node \
    nodemon \
    pm2 \
    eslint \
    prettier \
    webpack \
    webpack-cli \
    vite \
    @vue/cli \
    create-react-app \
    @angular/cli

# Install Rust toolchain
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
RUN rustup component add rust-src rust-analyzer clippy rustfmt

# Install Go tools
RUN go install golang.org/x/tools/gopls@latest && \
    go install github.com/go-delve/delve/cmd/dlv@latest && \
    go install golang.org/x/lint/golint@latest

# Set up workspace
WORKDIR /workspace

# Create tool directories
RUN mkdir -p /workspace/{tools,notebooks,profiles,logs,docs}

# Environment variables
ENV IDE_SUPPORT=enabled
ENV DEBUGGING=enabled
ENV PROFILING=enabled
ENV JUPYTER_ENABLE_LAB=yes

# Create Jupyter configuration
RUN jupyter notebook --generate-config && \
    echo "c.NotebookApp.token = ''" >> ~/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.password = ''" >> ~/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.allow_origin = '*'" >> ~/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.ip = '0.0.0.0'" >> ~/.jupyter/jupyter_notebook_config.py

# Create development launcher script
RUN echo '#!/bin/bash' > /workspace/launch-devtools.sh && \
    echo 'echo "ðŸ”§ SynOS Development Tools Starting..."' >> /workspace/launch-devtools.sh && \
    echo '' >> /workspace/launch-devtools.sh && \
    echo '# Start Jupyter Lab' >> /workspace/launch-devtools.sh && \
    echo 'jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root &' >> /workspace/launch-devtools.sh && \
    echo '' >> /workspace/launch-devtools.sh && \
    echo '# Start language servers if needed' >> /workspace/launch-devtools.sh && \
    echo 'echo "âœ… Development tools ready"' >> /workspace/launch-devtools.sh && \
    echo 'echo "ðŸ““ Jupyter Lab: http://localhost:8888"' >> /workspace/launch-devtools.sh && \
    echo 'echo "ðŸš€ Development server: http://localhost:3000"' >> /workspace/launch-devtools.sh && \
    echo '' >> /workspace/launch-devtools.sh && \
    echo '# Keep container running' >> /workspace/launch-devtools.sh && \
    echo 'tail -f /dev/null' >> /workspace/launch-devtools.sh && \
    chmod +x /workspace/launch-devtools.sh

# Create VS Code server setup script
RUN echo '#!/bin/bash' > /workspace/setup-vscode-server.sh && \
    echo '# Install VS Code Server' >> /workspace/setup-vscode-server.sh && \
    echo 'curl -fsSL https://code-server.dev/install.sh | sh' >> /workspace/setup-vscode-server.sh && \
    echo 'code-server --bind-addr 0.0.0.0:8080 --auth none &' >> /workspace/setup-vscode-server.sh && \
    chmod +x /workspace/setup-vscode-server.sh

# Expose development ports
EXPOSE 8888 3000 8080 9229 5000

# Default command
CMD ["/workspace/launch-devtools.sh"]