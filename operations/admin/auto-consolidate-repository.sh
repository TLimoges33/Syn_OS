#!/bin/bash

# 🎯 Automated SynOS Repository Consolidation (Non-Interactive)
# Automatically consolidates all branches into main

set -e

echo "🚀 SynOS Automated Repository Consolidation"
echo "=========================================="

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_header() {
    echo -e "${PURPLE}$1${NC}"
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Configuration
PRODUCTION_REMOTE="production"
MAIN_BRANCH="main"

print_header "🔄 Starting Automated Repository Consolidation"

# Step 1: Fetch all branches
print_status "Fetching all remote branches..."
git fetch --all --prune

# Step 2: Switch to main branch
print_status "Ensuring we're on main branch..."
if git show-ref --verify --quiet refs/heads/$MAIN_BRANCH; then
    git checkout $MAIN_BRANCH
else
    git checkout -b $MAIN_BRANCH $PRODUCTION_REMOTE/$MAIN_BRANCH 2>/dev/null || git checkout -b $MAIN_BRANCH
fi

# Step 3: Update main branch
print_status "Updating main branch..."
git pull $PRODUCTION_REMOTE $MAIN_BRANCH 2>/dev/null || print_warning "Could not pull main - using local version"

# Step 4: Get branches to merge
BRANCHES_TO_MERGE=$(git branch -r | \
    grep "^  $PRODUCTION_REMOTE/" | \
    grep -v "$PRODUCTION_REMOTE/$MAIN_BRANCH$" | \
    grep -v "$PRODUCTION_REMOTE/master$" | \
    grep -v "$PRODUCTION_REMOTE/ebpf-achievement-clean$" | \
    sed "s/^  $PRODUCTION_REMOTE\///" | \
    sort)

print_status "Branches identified for merging:"
BRANCH_COUNT=0
for branch in $BRANCHES_TO_MERGE; do
    echo "  • $branch"
    ((BRANCH_COUNT++))
done

if [ $BRANCH_COUNT -eq 0 ]; then
    print_success "✅ No branches to merge - repository already consolidated!"
    echo ""
    print_status "Current repository structure:"
    git ls-remote --heads $PRODUCTION_REMOTE | while read sha branch; do
        branch_name=$(echo $branch | sed 's/refs\/heads\///')
        echo "  🌟 $branch_name"
    done
    exit 0
fi

# Step 5: Merge branches
print_status "Merging $BRANCH_COUNT branches into main..."

MERGED_BRANCHES=()
FAILED_BRANCHES=()
MERGE_DETAILS=""

for branch in $BRANCHES_TO_MERGE; do
    print_status "Processing: $branch"
    
    # Fetch the specific branch
    if git fetch $PRODUCTION_REMOTE $branch:temp_$branch 2>/dev/null; then
        # Attempt merge
        if git merge --no-ff --no-edit temp_$branch -m "🔄 Merge $branch into main

Automated consolidation merge of feature branch $branch.
All feature work consolidated into main development line.

Branch: $branch
Date: $(date)
Automation: scripts/auto-consolidate-repository.sh"; then
            print_success "✅ Merged $branch"
            MERGED_BRANCHES+=($branch)
            MERGE_DETAILS+="  ✅ $branch - Successfully merged and integrated\n"
        else
            print_error "❌ Merge conflict in $branch"
            FAILED_BRANCHES+=($branch)
            MERGE_DETAILS+="  ❌ $branch - Merge conflicts require manual resolution\n"
            git merge --abort 2>/dev/null || true
        fi
        
        # Clean up temp branch
        git branch -D temp_$branch 2>/dev/null || true
    else
        print_warning "⚠️ Could not fetch $branch - skipping"
        MERGE_DETAILS+="  ⚠️ $branch - Could not fetch from remote\n"
    fi
done

# Step 6: Create consolidation commit
CONSOLIDATION_SUMMARY="🎯 AUTOMATED REPOSITORY CONSOLIDATION

Repository consolidation completed: $(date)

CONSOLIDATION RESULTS:
====================
✅ Successfully merged: ${#MERGED_BRANCHES[@]} branches
❌ Failed merges: ${#FAILED_BRANCHES[@]} branches  
⚠️ Total processed: $BRANCH_COUNT branches

MERGE DETAILS:
=============
$MERGE_DETAILS

FINAL REPOSITORY STATE:
======================
🌟 main - Primary development branch (consolidated)
🌟 master - Stable release branch
🎉 ebpf-achievement-clean - Preserved achievement branch

BENEFITS OF CONSOLIDATION:
=========================
• Simplified branch management
• Unified development workflow  
• Reduced repository complexity
• Cleaner git history
• Focused development on main branch

NEXT DEVELOPMENT PRIORITIES:
===========================
1. Neural Darwinism Implementation (7-10 days)
2. Service Integration Completion (5-7 days)  
3. ParrotOS Security Tools Integration

The repository is now optimized for focused development! 🚀

Generated by: scripts/auto-consolidate-repository.sh"

git add -A
git commit --allow-empty -m "$CONSOLIDATION_SUMMARY"

# Step 7: Push consolidated main
print_status "Pushing consolidated main branch to production..."
if git push $PRODUCTION_REMOTE $MAIN_BRANCH; then
    print_success "✅ Consolidated main branch pushed successfully"
else
    print_error "❌ Failed to push main branch"
    exit 1
fi

# Step 8: Clean up merged branches
print_status "Cleaning up successfully merged remote branches..."

for branch in "${MERGED_BRANCHES[@]}"; do
    print_status "Deleting merged branch: $branch"
    if git push $PRODUCTION_REMOTE --delete $branch 2>/dev/null; then
        print_success "✅ Deleted $branch from remote"
    else
        print_warning "⚠️ Could not delete $branch (may already be gone)"
    fi
done

# Step 9: Final status report
print_header "🎉 REPOSITORY CONSOLIDATION COMPLETE!"

echo ""
print_success "Automated consolidation completed successfully!"
echo ""
echo "📊 CONSOLIDATION RESULTS:"
echo "========================"
echo -e "✅ Merged branches: ${GREEN}${#MERGED_BRANCHES[@]}${NC}"
echo -e "❌ Failed merges: ${RED}${#FAILED_BRANCHES[@]}${NC}"
echo -e "📁 Total processed: ${BLUE}$BRANCH_COUNT${NC}"

if [ ${#MERGED_BRANCHES[@]} -gt 0 ]; then
    echo ""
    echo "✅ SUCCESSFULLY MERGED:"
    for branch in "${MERGED_BRANCHES[@]}"; do
        echo "  • $branch"
    done
fi

if [ ${#FAILED_BRANCHES[@]} -gt 0 ]; then
    echo ""
    echo "❌ MERGE CONFLICTS (Manual Resolution Required):"
    for branch in "${FAILED_BRANCHES[@]}"; do
        echo "  • $branch"
    done
fi

echo ""
echo "🌟 FINAL REPOSITORY STRUCTURE:"
echo "============================="
git ls-remote --heads $PRODUCTION_REMOTE | while read sha branch; do
    branch_name=$(echo $branch | sed 's/refs\/heads\///')
    case $branch_name in
        "main")
            echo -e "  🌟 ${GREEN}$branch_name${NC} (primary development - consolidated)"
            ;;
        "master") 
            echo -e "  🌟 ${BLUE}$branch_name${NC} (stable releases)"
            ;;
        "ebpf-achievement-clean")
            echo -e "  🎉 ${PURPLE}$branch_name${NC} (preserved eBPF achievement)"
            ;;
        *)
            echo -e "  📁 ${YELLOW}$branch_name${NC} (remaining - may need manual merge)"
            ;;
    esac
done

echo ""
print_success "🚀 Repository is now clean and optimized for development!"
print_status "💡 All feature work has been consolidated into the main branch"
print_status "🎯 Ready to continue with Neural Darwinism implementation"

if [ ${#FAILED_BRANCHES[@]} -gt 0 ]; then
    echo ""
    print_warning "⚠️  Some branches require manual conflict resolution"
    print_status "📝 Check the failed branches and merge manually if needed"
fi
