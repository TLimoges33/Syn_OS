#!/bin/bash
# Secure Sudo Wrapper - Enterprise Security Implementation
# Generated by SynOS Security Automation System

set -euo pipefail

# Security: Load environment configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/environment-secure.sh"

# Audit logging
SUDO_AUDIT_LOG="${PROJECT_ROOT}/security/logs/sudo-audit.log"
mkdir -p "$(dirname "$SUDO_AUDIT_LOG")"

# Security function: Validate sudo operation
validate_sudo_operation() {
    local operation="$1"
    local target="${2:-}"
    
    # Critical path protection
    case "$target" in
        "/" | "/bin" | "/usr" | "/etc" | "/lib" | "/sbin" | "/boot")
            echo "‚ùå SECURITY: Refusing dangerous operation on critical system path: $target" >&2
            return 1
            ;;
        */home/diablorain* | */home/*)
            if [[ "$operation" == "rm" ]] && [[ "$target" == *"/"* ]]; then
                echo "‚ö†Ô∏è SECURITY: Home directory operation requires confirmation" >&2
                read -p "Confirm operation on $target (yes/no): " confirm
                [[ "$confirm" == "yes" ]] || return 1
            fi
            ;;
    esac
    
    return 0
}

# Secure sudo wrapper function
secure_sudo() {
    local operation="$1"
    shift
    
    # Log the operation
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$$] $USER: sudo $operation $*" >> "$SUDO_AUDIT_LOG"
    
    # Validate operation
    case "$operation" in
        rm|rmdir)
            for target in "$@"; do
                validate_sudo_operation "$operation" "$target" || return 1
            done
            ;;
        chmod|chown)
            # Allow these operations with logging
            ;;
        *)
            # Log other operations
            ;;
    esac
    
    # Execute with actual sudo
    sudo "$operation" "$@"
}

# Secure removal function
secure_remove() {
    local target="$1"
    
    # Extra validation for removal operations
    case "$target" in
        "/" | "/bin" | "/usr" | "/etc" | "/lib" | "/sbin")
            echo "‚ùå SECURITY: Refusing to remove critical system path: $target" >&2
            return 1
            ;;
        "$PROJECT_ROOT"/archive/* | "$PROJECT_ROOT"/build/*)
            # Allow project-specific removals
            echo "üîÑ Secure removal: $target"
            sudo rm -rf "$target"
            ;;
        *)
            echo "‚ö†Ô∏è SECURITY: Manual confirmation required for: $target" >&2
            read -p "Confirm removal of $target (yes/no): " confirm
            if [[ "$confirm" == "yes" ]]; then
                sudo rm -rf "$target"
            else
                echo "‚ùå Operation cancelled by user"
                return 1
            fi
            ;;
    esac
}

# Export security functions
export -f secure_sudo secure_remove validate_sudo_operation

echo "‚úÖ Secure sudo wrapper loaded"
echo "üõ°Ô∏è Security functions available: secure_sudo, secure_remove"