# Syn_OS Development Environment Configuration
# Modern development environment best practices
# Version: 2025.08

environment:
  name: "syn-os-development"
  version: "1.0.0"
  description: "Optimized development environment for Syn_OS"

# Core development tools
tools:
  version_control:
    git:
      version: "latest"
      lfs_enabled: true
      hooks:
        pre_commit: true
        pre_push: true
        commit_msg: true

  languages:
    rust:
      version: "stable"
      targets:
        - "x86_64-unknown-none"
        - "i686-unknown-none"
      components:
        - "rust-src"
        - "llvm-tools-preview"
        - "clippy"
        - "rustfmt"
      tools:
        - "cargo-audit"
        - "cargo-watch"
        - "cargo-expand"
        - "bootimage"

    python:
      version: "3.11"
      virtual_env: true
      tools:
        - "black"
        - "pylint"
        - "mypy"
        - "bandit"
        - "safety"
        - "pytest"
        - "pytest-cov"

    c_cpp:
      compiler: "clang"
      version: "latest"
      tools:
        - "clang-tools"
        - "lldb"
        - "valgrind"
        - "cppcheck"

    go:
      version: "1.21"
      tools:
        - "gopls"
        - "goimports"
        - "golangci-lint"

# Security tools
security:
  static_analysis:
    - "bandit" # Python security
    - "clippy" # Rust security
    - "cppcheck" # C/C++ security

  vulnerability_scanning:
    - "trivy" # Container scanning
    - "cargo-audit" # Rust dependencies
    - "safety" # Python dependencies

  runtime_analysis:
    - "valgrind" # Memory analysis
    - "address_sanitizer"
    - "undefined_behavior_sanitizer"

# Container and orchestration
containers:
  docker:
    version: "latest"
    compose: true
    buildx: true

  kubernetes:
    kubectl: true
    helm: true
    kind: true # Local K8s clusters

# IDE and Editor Configuration
editor:
  vscode:
    extensions:
      essential:
        - "rust-lang.rust-analyzer"
        - "ms-python.python"
        - "ms-python.pylint"
        - "ms-python.pylance"
        - "ms-vscode.cpptools"
        - "golang.go"

      ai_assistance:
        - "github.copilot"
        - "github.copilot-chat"
        - "continue.continue"

      productivity:
        - "eamodio.gitlens"
        - "formulahendry.code-runner"
        - "vadimcn.vscode-lldb"
        - "ms-vscode.hexeditor"

      documentation:
        - "yzhang.markdown-all-in-one"
        - "bierner.markdown-mermaid"
        - "hediet.vscode-drawio"

    settings:
      rust_analyzer:
        checkOnSave: true
        check:
          command: "clippy"
          extraArgs: ["--all-targets", "--all-features"]
        cargo_features: "all"
        proc_macro_enable: true

      python:
        linting_enabled: true
        pylint_enabled: true
        formatting_provider: "black"

      editor:
        format_on_save: true
        code_actions_on_save:
          source_fix_all: true
          source_organize_imports: true

# Development workflows
workflows:
  build:
    rust: "cargo build --target x86_64-unknown-none"
    test: "cargo test --workspace"
    format: "cargo fmt --all"
    lint: "cargo clippy -- -D warnings"

  python:
    test: "pytest tests/ -v"
    format: "black src/"
    lint: "pylint src/"
    security: "bandit -r src/"

  integration:
    pre_commit:
      - "cargo fmt --all -- --check"
      - "cargo clippy -- -D warnings"
      - "black src/ --check"
      - "pytest tests/"

    pre_push:
      - "cargo test --workspace"
      - "cargo audit"
      - "safety check"

# Performance monitoring
monitoring:
  metrics:
    build_times: true
    test_coverage: true
    code_quality: true

  tools:
    - "htop"
    - "iotop"
    - "time"
    - "hyperfine" # Benchmarking

# Environment variables
env_vars:
  development:
    RUST_BACKTRACE: "1"
    CARGO_TERM_COLOR: "always"
    LOG_LEVEL: "debug"
    ENVIRONMENT: "development"
    SYN_OS_DEV_MODE: "true"

  paths:
    - "$HOME/.cargo/bin"
    - "$HOME/.local/bin"
    - "/usr/local/go/bin"

# Resource requirements
resources:
  minimum:
    memory: "8GB"
    storage: "20GB"
    cpu_cores: 4

  recommended:
    memory: "16GB"
    storage: "50GB"
    cpu_cores: 8

# Health checks
health_checks:
  startup:
    - "rustc --version"
    - "python3 --version"
    - "docker --version"
    - "git --version"

  periodic:
    - "cargo check"
    - "python -c 'import sys; print(sys.version)'"
    - "docker info"

# Best practices enforcement
best_practices:
  code_quality:
    rust:
      - "Use clippy for linting"
      - "Format with rustfmt"
      - "Test with cargo test"
      - "Document public APIs"

    python:
      - "Format with black"
      - "Lint with pylint"
      - "Type check with mypy"
      - "Test with pytest"

    security:
      - "Run security audits"
      - "Scan containers"
      - "Use static analysis"
      - "Regular dependency updates"

  version_control:
    - "Use conventional commits"
    - "Keep commits atomic"
    - "Write descriptive messages"
    - "Use feature branches"

  documentation:
    - "Document APIs"
    - "Update README"
    - "Maintain changelog"
    - "Include examples"
