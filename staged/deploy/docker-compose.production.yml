version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: syn_os_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - orchestrator
      - consciousness
      - security-dashboard
    networks:
      - syn_os_production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NATS Cluster
  nats-1:
    image: nats:2.10-alpine
    container_name: syn_os_nats_1
    command: [
      "--cluster_name=syn_os_cluster",
      "--cluster=nats://0.0.0.0:6222",
      "--routes=nats-route://nats-2:6222,nats-route://nats-3:6222",
      "--jetstream",
      "--store_dir=/data",
      "--max_memory_store=2GB",
      "--max_file_store=50GB"
    ]
    volumes:
      - nats_1_data:/data
    networks:
      - syn_os_production
    restart: unless-stopped

  nats-2:
    image: nats:2.10-alpine
    container_name: syn_os_nats_2
    command: [
      "--cluster_name=syn_os_cluster",
      "--cluster=nats://0.0.0.0:6222",
      "--routes=nats-route://nats-1:6222,nats-route://nats-3:6222",
      "--jetstream",
      "--store_dir=/data",
      "--max_memory_store=2GB",
      "--max_file_store=50GB"
    ]
    volumes:
      - nats_2_data:/data
    networks:
      - syn_os_production
    restart: unless-stopped

  nats-3:
    image: nats:2.10-alpine
    container_name: syn_os_nats_3
    command: [
      "--cluster_name=syn_os_cluster",
      "--cluster=nats://0.0.0.0:6222",
      "--routes=nats-route://nats-1:6222,nats-route://nats-2:6222",
      "--jetstream",
      "--store_dir=/data",
      "--max_memory_store=2GB",
      "--max_file_store=50GB"
    ]
    volumes:
      - nats_3_data:/data
    networks:
      - syn_os_production
    restart: unless-stopped

  # PostgreSQL Primary
  postgres-primary:
    image: postgres:15-alpine
    container_name: syn_os_postgres_primary
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./deploy/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./deploy/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    networks:
      - syn_os_production
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: syn_os_postgres_replica
    environment:
      POSTGRES_MASTER_SERVICE: postgres-primary
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
      POSTGRES_MASTER_PORT_NUMBER: 5432
    depends_on:
      postgres-primary:
        condition: service_healthy
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - syn_os_production
    restart: unless-stopped

  # Redis Cluster
  redis-master:
    image: redis:7-alpine
    container_name: syn_os_redis_master
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_master_data:/data
    networks:
      - syn_os_production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-sentinel:
    image: redis:7-alpine
    container_name: syn_os_redis_sentinel
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./deploy/redis/sentinel.conf:/etc/redis/sentinel.conf
    depends_on:
      - redis-master
    networks:
      - syn_os_production
    restart: unless-stopped

  # Orchestrator Cluster
  orchestrator-1:
    image: ${REGISTRY}/syn-os-orchestrator:${TAG}
    container_name: syn_os_orchestrator_1
    environment:
      - ENV=production
      - INSTANCE_ID=orchestrator-1
      - NATS_URL=nats://nats-1:4222,nats://nats-2:4222,nats://nats-3:4222
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_REPLICA_HOST=postgres-replica
      - REDIS_MASTER_HOST=redis-master
      - REDIS_SENTINEL_HOST=redis-sentinel
    env_file:
      - .env.production
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      nats-1:
        condition: service_started
    networks:
      - syn_os_production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  orchestrator-2:
    image: ${REGISTRY}/syn-os-orchestrator:${TAG}
    container_name: syn_os_orchestrator_2
    environment:
      - ENV=production
      - INSTANCE_ID=orchestrator-2
      - NATS_URL=nats://nats-1:4222,nats://nats-2:4222,nats://nats-3:4222
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_REPLICA_HOST=postgres-replica
      - REDIS_MASTER_HOST=redis-master
      - REDIS_SENTINEL_HOST=redis-sentinel
    env_file:
      - .env.production
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      nats-1:
        condition: service_started
    networks:
      - syn_os_production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Consciousness Cluster
  consciousness-1:
    image: ${REGISTRY}/syn-os-consciousness:${TAG}
    container_name: syn_os_consciousness_1
    environment:
      - CONSCIOUSNESS_MODE=production
      - INSTANCE_ID=consciousness-1
      - NATS_URL=nats://nats-1:4222,nats://nats-2:4222,nats://nats-3:4222
      - ORCHESTRATOR_URL=http://nginx/api
    env_file:
      - .env.production
    depends_on:
      - orchestrator-1
      - orchestrator-2
    volumes:
      - consciousness_1_data:/app/data
    networks:
      - syn_os_production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8081/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  consciousness-2:
    image: ${REGISTRY}/syn-os-consciousness:${TAG}
    container_name: syn_os_consciousness_2
    environment:
      - CONSCIOUSNESS_MODE=production
      - INSTANCE_ID=consciousness-2
      - NATS_URL=nats://nats-1:4222,nats://nats-2:4222,nats://nats-3:4222
      - ORCHESTRATOR_URL=http://nginx/api
    env_file:
      - .env.production
    depends_on:
      - orchestrator-1
      - orchestrator-2
    volumes:
      - consciousness_2_data:/app/data
    networks:
      - syn_os_production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Security Dashboard Cluster
  security-dashboard-1:
    image: ${REGISTRY}/syn-os-security-dashboard:${TAG}
    container_name: syn_os_security_dashboard_1
    environment:
      - INSTANCE_ID=security-dashboard-1
      - NATS_URL=nats://nats-1:4222,nats://nats-2:4222,nats://nats-3:4222
      - ORCHESTRATOR_URL=http://nginx/api
      - CONSCIOUSNESS_URL=http://nginx/consciousness
    env_file:
      - .env.production
    depends_on:
      - consciousness-1
      - consciousness-2
    volumes:
      - security_logs:/app/logs
    networks:
      - syn_os_production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  security-dashboard-2:
    image: ${REGISTRY}/syn-os-security-dashboard:${TAG}
    container_name: syn_os_security_dashboard_2
    environment:
      - INSTANCE_ID=security-dashboard-2
      - NATS_URL=nats://nats-1:4222,nats://nats-2:4222,nats://nats-3:4222
      - ORCHESTRATOR_URL=http://nginx/api
      - CONSCIOUSNESS_URL=http://nginx/consciousness
    env_file:
      - .env.production
    depends_on:
      - consciousness-1
      - consciousness-2
    volumes:
      - security_logs:/app/logs
    networks:
      - syn_os_production
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: syn_os_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - syn_os_production
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: syn_os_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - syn_os_production
    restart: unless-stopped

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: syn_os_loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./deploy/logging/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/tmp/loki
    networks:
      - syn_os_production
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: syn_os_promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./deploy/logging/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - nginx_logs:/var/log/nginx:ro
      - security_logs:/var/log/security:ro
    networks:
      - syn_os_production
    restart: unless-stopped

volumes:
  nginx_logs:
  nats_1_data:
  nats_2_data:
  nats_3_data:
  postgres_primary_data:
  postgres_replica_data:
  redis_master_data:
  consciousness_1_data:
  consciousness_2_data:
  security_logs:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  syn_os_production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16