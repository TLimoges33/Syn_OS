version: "3.8"

services:
  nats:
    image: nats:2.10-alpine
    container_name: syn_os_nats
    ports:
      - "4222:4222"
      - "8222:8222"
      - "6222:6222"
    command:
      - "--jetstream"
      - "--store_dir=/data"
      - "--max_mem_store=1GB"
      - "--max_file_store=10GB"
      - "--http_port=8222"
    volumes:
      - nats_data:/data
    networks:
      - syn_os_network
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - wget
        - --quiet
        - --tries=1
        - --spider
        - http://localhost:8222/healthz
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: syn_os_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-syn_os}
      POSTGRES_USER: ${POSTGRES_USER:-syn_os_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Note: POSTGRES_SSL_MODE is not a native Postgres env var; kept for compatibility if used by clients
      POSTGRES_SSL_MODE: ${POSTGRES_SSL_MODE:-require}
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/orchestrator/migrations:/docker-entrypoint-initdb.d
    networks:
      - syn_os_network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-syn_os_user} -d ${POSTGRES_DB:-syn_os}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: syn_os_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - syn_os_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Orchestrator (Go)
  orchestrator:
    build:
      context: ../services/orchestrator
      dockerfile: Dockerfile
    container_name: syn_os_orchestrator
    environment:
      - ENV=docker
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-syn_os}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - HTTP_PORT=${HTTP_PORT:-8080}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - INTERNAL_API_KEY=${INTERNAL_API_KEY}
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security Services (HSM & Quantum Crypto)
  security-services:
    build:
      context: .
      dockerfile: docker/Dockerfile.security
    container_name: syn_os_security_services
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:8080}
      - POSTGRES_URL=${POSTGRES_URL:-postgresql://syn_os_user:${POSTGRES_PASSWORD}@postgres:5432/syn_os}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECURITY_MODE=${SECURITY_MODE:-production}
      - HSM_ENABLED=${HSM_ENABLED:-false}
      - QUANTUM_CRYPTO_ENABLED=${QUANTUM_CRYPTO_ENABLED:-false}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SIGNING_KEY=${SIGNING_KEY}
    env_file:
      - .env
    ports:
      - "8088:8088"
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    volumes:
      - security_keys:/app/keys
      - security_data:/app/data
      - ./logs/security:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/security/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consciousness System V2 (Python)
  consciousness:
    build:
      context: .
      dockerfile: docker/Dockerfile.consciousness
    container_name: syn_os_consciousness
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:8080}
      - SECURITY_URL=${SECURITY_URL:-http://security-services:8088}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CONSCIOUSNESS_MODE=${CONSCIOUSNESS_MODE:-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CONSCIOUSNESS_ENCRYPTION_KEY=${CONSCIOUSNESS_ENCRYPTION_KEY}
      - LM_STUDIO_API_KEY=${LM_STUDIO_API_KEY}
      # Phase 3.4 Performance Settings
      - RAY_BATCH_SIZE=${RAY_BATCH_SIZE:-50}
      - RAY_WORKERS=${RAY_WORKERS:-4}
      - FASTAPI_WORKERS=${FASTAPI_WORKERS:-2}
      - PERFORMANCE_MODE=${PERFORMANCE_MODE:-optimized}
    env_file:
      - .env
    depends_on:
      nats:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
      security-services:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    volumes:
      - consciousness_data:/app/data
      - ./src/consciousness_v2:/app/src/consciousness_v2
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:8081/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ray Distributed Consciousness (High-Performance Cluster)
  ray-consciousness-head:
    build:
      context: ../services/consciousness-ray-distributed
      dockerfile: Dockerfile
    container_name: syn_os_ray_consciousness_head
    command:
      [
        "ray",
        "start",
        "--head",
        "--dashboard-host=0.0.0.0",
        "--dashboard-port=8265",
        "--port=10001",
      ]
    ports:
      - "8265:8265" # Ray Dashboard
      - "10001:10001" # Ray Head Port
    environment:
      - RAY_DISABLE_IMPORT_WARNING=1
      - PYTHONPATH=/app
      - CONSCIOUSNESS_MODE=${CONSCIOUSNESS_MODE:-distributed}
    env_file:
      - ../services/consciousness-ray-distributed/ray-consciousness.env
    volumes:
      - consciousness_ray_data:/app/data
      - consciousness_ray_logs:/app/logs
    networks:
      - syn_os_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ray", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  ray-consciousness-worker:
    build:
      context: ../services/consciousness-ray-distributed
      dockerfile: Dockerfile
    command: ["ray", "start", "--address=ray-consciousness-head:10001"]
    environment:
      - RAY_DISABLE_IMPORT_WARNING=1
      - PYTHONPATH=/app
    env_file:
      - ../services/consciousness-ray-distributed/ray-consciousness.env
    volumes:
      - consciousness_ray_data:/app/data
      - consciousness_ray_logs:/app/logs
    networks:
      - syn_os_network
    depends_on:
      - ray-consciousness-head
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: "1.0"

  # Ray Consciousness API (Integration Service)
  ray-consciousness-api:
    build:
      context: ../services/consciousness-ray-distributed
      dockerfile: Dockerfile
    container_name: syn_os_ray_consciousness_api
    command: ["python", "ray_consciousness_api.py"]
    ports:
      - "8010:8000" # Ray Consciousness API
      - "9095:9090" # Ray Metrics
    environment:
      - RAY_ADDRESS=ray://ray-consciousness-head:10001
      - PYTHONPATH=/app
      - CONSCIOUSNESS_URL=${CONSCIOUSNESS_URL:-http://consciousness:8081}
      - NATS_URL=${NATS_URL:-nats://nats:4222}
    env_file:
      - ../services/consciousness-ray-distributed/ray-consciousness.env
    volumes:
      - consciousness_ray_data:/app/data
      - consciousness_ray_logs:/app/logs
    networks:
      - syn_os_network
    depends_on:
      - ray-consciousness-head
      - consciousness
      - nats
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security Dashboard (Python)
  security-dashboard:
    build:
      context: ../services/consciousness-dashboard
      dockerfile: Dockerfile
    container_name: syn_os_security_dashboard
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:8080}
      - CONSCIOUSNESS_URL=${CONSCIOUSNESS_URL:-http://consciousness:8081}
      - RAY_CONSCIOUSNESS_URL=${RAY_CONSCIOUSNESS_URL:-http://ray-consciousness-api:8000}
      - SECURITY_DASHBOARD_PORT=${SECURITY_DASHBOARD_PORT:-8083}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SIGNING_KEY=${SIGNING_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    ports:
      - "8083:8083"
    depends_on:
      nats:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
      consciousness:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./logs/security:/app/logs
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:8083/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Learning Hub (Python)
  learning-hub:
    build:
      context: ../services/educational-platform
      dockerfile: Dockerfile
    container_name: syn_os_learning_hub
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:8080}
      - CONSCIOUSNESS_URL=${CONSCIOUSNESS_URL:-http://consciousness:8081}
      - LEARNING_HUB_PORT=${LEARNING_HUB_PORT:-8084}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    ports:
      - "8084:8084"
    depends_on:
      nats:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
      consciousness:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:8084/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security Tutor (Python)
  security-tutor:
    build:
      context: ../services/educational-platform
      dockerfile: Dockerfile
    container_name: syn_os_security_tutor
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:8080}
      - CONSCIOUSNESS_URL=${CONSCIOUSNESS_URL:-http://consciousness:8081}
      - SECURITY_TUTOR_PORT=${SECURITY_TUTOR_PORT:-8085}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    ports:
      - "8085:8085"
    depends_on:
      nats:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
      consciousness:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:8085/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard (Python)
  web-dashboard:
    build:
      context: ../services/consciousness-dashboard
      dockerfile: Dockerfile
    container_name: syn_os_web_dashboard
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:8080}
      - CONSCIOUSNESS_URL=${CONSCIOUSNESS_URL:-http://consciousness:8081}
      - WEB_DASHBOARD_PORT=${WEB_DASHBOARD_PORT:-8086}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    ports:
      - "8086:8086"
    depends_on:
      nats:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
      consciousness:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:8086/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Threat Intelligence Dashboard (Python)
  threat-intelligence:
    build:
      context: ../services/consciousness-dashboard
      dockerfile: Dockerfile
    container_name: syn_os_threat_intelligence
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:8080}
      - CONSCIOUSNESS_URL=${CONSCIOUSNESS_URL:-http://consciousness:8081}
      - THREAT_INTEL_PORT=${THREAT_INTEL_PORT:-8087}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    ports:
      - "8087:8087"
    depends_on:
      nats:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
      consciousness:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:8087/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # NATS Monitoring (Optional)
  nats-surveyor:
    image: natsio/nats-surveyor:latest
    container_name: syn_os_nats_surveyor
    environment:
      - NATS_SURVEYOR_SERVER_COUNT=1
    ports:
      - "7777:7777"
    depends_on:
      - nats
    networks:
      - syn_os_network
    restart: unless-stopped

  # Consciousness AI Bridge
  consciousness-ai-bridge:
    build:
      context: ../services/consciousness-ai-bridge
      dockerfile: Dockerfile
    container_name: synapticos-consciousness-bridge
    ports:
      - "8082:8082"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - LM_STUDIO_URL=${LM_STUDIO_URL:-http://localhost:1234}
      - OLLAMA_URL=${OLLAMA_URL:-http://localhost:11434}
      - NATS_URL=${NATS_URL:-nats://nats:4222}
    env_file:
      - .env
    volumes:
      - ./data/consciousness_state:/app/data
      - ./logs:/app/logs
    networks:
      - syn_os_network
    depends_on:
      - nats
      - redis
    restart: unless-stopped

  # Educational Platform Service
  educational-platform:
    build:
      context: ../services/educational-platform
      dockerfile: Dockerfile
    container_name: synapticos-educational-platform
    ports:
      - "8084:8084"
    environment:
      - CONSCIOUSNESS_BRIDGE_URL=http://consciousness-ai-bridge:8082
      - DATABASE_URL=sqlite:///app/data/education.db
    volumes:
      - ./data/education:/app/data
      - ./logs:/app/logs
    networks:
      - syn_os_network
    depends_on:
      - consciousness-ai-bridge
    restart: unless-stopped

  # Vector Database Service
  vector-db:
    image: qdrant/qdrant:latest
    container_name: synapticos-vector-db
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./data/vector_storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - syn_os_network
    restart: unless-stopped

  # Consciousness Dashboard
  consciousness-dashboard:
    build:
      context: ../services/consciousness-dashboard
      dockerfile: Dockerfile
    container_name: synapticos-consciousness-dashboard
    ports:
      - "8000:8000"
    environment:
      - CONSCIOUSNESS_BRIDGE_URL=http://consciousness-ai-bridge:8082
      - EDUCATION_SERVICE_URL=http://educational-platform:8084
    volumes:
      - ./logs:/app/logs
    networks:
      - syn_os_network
    depends_on:
      - consciousness-ai-bridge
    restart: unless-stopped

  # Educational Platform GUI
  education-gui:
    build:
      context: ../services/educational-platform
      dockerfile: Dockerfile.gui
    container_name: synapticos-education-gui
    ports:
      - "8001:8001"
    environment:
      - EDUCATION_SERVICE_URL=http://educational-platform:8084
      - CONSCIOUSNESS_BRIDGE_URL=http://consciousness-ai-bridge:8082
    volumes:
      - ./data/education:/app/data
      - ./logs:/app/logs
    networks:
      - syn_os_network
    depends_on:
      - educational-platform
      - consciousness-ai-bridge
    restart: unless-stopped

volumes:
  nats_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  consciousness_data:
    driver: local
  security_keys:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/syn_os/security/keys
  security_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/syn_os/data/security
  consciousness_ray_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/syn_os/data/consciousness/ray
  consciousness_ray_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/syn_os/logs/consciousness/ray

networks:
  syn_os_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
