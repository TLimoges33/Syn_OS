#!/bin/bash

# SynOS Podman Development Orchestrator
# Podman-compatible version for systems without Docker

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SYNOS_VERSION="1.0.0"
BUILD_DATE=$(date +%Y%m%d)
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_phase() {
    echo -e "${PURPLE}[PHASE]${NC} $1"
}

# ASCII Art Banner
print_banner() {
    echo -e "${CYAN}"
    cat << 'EOF'
 ____              ___  ____  
/ ___| _   _ _ __  / _ \/ ___| 
\___ \| | | | '_ \| | | \___ \ 
 ___) | |_| | | | | |_| |___) |
|____/ \__, |_| |_|\___/|____/ 
       |___/                  

Neural Darwinism Enhanced Security OS
Podman Development Environment
EOF
    echo -e "${NC}"
}

# Podman network setup
setup_network() {
    if ! podman network exists synos-dev 2>/dev/null; then
        log_info "Creating SynOS development network..."
        podman network create synos-dev
        log_success "SynOS network created"
    fi
}

# Start development containers with Podman
start_consciousness() {
    log_info "Starting Neural Darwinism consciousness engine..."
    
    podman run -d \
        --name synos-consciousness-dev \
        --network synos-dev \
        -p 9090:8000 \
        -v "$PROJECT_ROOT/data/consciousness:/workspace/data" \
        -v "$PROJECT_ROOT/logs:/workspace/logs" \
        -e PYTHONPATH=/workspace \
        -e SYNOS_ENV=development \
        python:3.11-slim bash -c "
            pip install fastapi uvicorn numpy scipy torch transformers && \
            echo 'Consciousness engine started' && \
            python -c 'import time; time.sleep(3600)'
        "
    
    log_success "Consciousness engine started on http://localhost:9090"
}

start_kernel() {
    log_info "Starting custom kernel development environment..."
    
    podman run -d \
        --name synos-kernel-dev \
        --network synos-dev \
        --privileged \
        -v "$PROJECT_ROOT/data/kernel:/workspace/kernel" \
        -v "$PROJECT_ROOT/logs:/workspace/logs" \
        -e SYNOS_ENV=development \
        ubuntu:22.04 bash -c "
            apt update && apt install -y build-essential linux-headers-generic bpfcc-tools && \
            echo 'Kernel dev environment ready' && \
            sleep 3600
        "
    
    log_success "Kernel development environment started"
}

start_security() {
    log_info "Starting eBPF security framework..."
    
    podman run -d \
        --name synos-security-dev \
        --network synos-dev \
        -p 9091:8001 \
        --privileged \
        -v "$PROJECT_ROOT/data/security:/workspace/security" \
        -v "$PROJECT_ROOT/logs:/workspace/logs" \
        -e SYNOS_ENV=development \
        ubuntu:22.04 bash -c "
            apt update && apt install -y python3 python3-pip bpfcc-tools && \
            pip3 install fastapi uvicorn psutil && \
            echo 'Security framework started' && \
            sleep 3600
        "
    
    log_success "Security framework started on http://localhost:9091"
}

start_ui() {
    log_info "Starting adaptive UI development..."
    
    podman run -d \
        --name synos-ui-dev \
        --network synos-dev \
        -p 8080:8080 \
        -v "$PROJECT_ROOT/data/ui:/workspace/ui" \
        -v "$PROJECT_ROOT/logs:/workspace/logs" \
        -e SYNOS_ENV=development \
        node:18-alpine sh -c "
            npm install -g @vue/cli && \
            echo 'UI development environment ready' && \
            sleep 3600
        "
    
    log_success "UI development started on http://localhost:8080"
}

start_apps() {
    log_info "Starting application development environment..."
    
    podman run -d \
        --name synos-apps-dev \
        --network synos-dev \
        -v "$PROJECT_ROOT/data/apps:/workspace/apps" \
        -v "$PROJECT_ROOT/logs:/workspace/logs" \
        -e SYNOS_ENV=development \
        ubuntu:22.04 bash -c "
            apt update && apt install -y python3 python3-pip nodejs npm && \
            echo 'Apps development environment ready' && \
            sleep 3600
        "
    
    log_success "Apps development environment started"
}

# Start all components
start_all() {
    print_banner
    log_phase "Initializing SynOS Podman development environment..."
    
    setup_network
    
    log_phase "Starting all development components..."
    start_consciousness
    start_kernel  
    start_security
    start_ui
    start_apps
    
    log_success "All SynOS development components started!"
    echo ""
    echo "Access points:"
    echo "  • Consciousness Engine: http://localhost:9090"
    echo "  • Security Dashboard:   http://localhost:9091"
    echo "  • UI Development:       http://localhost:8080"
    echo ""
}

# Stop all components
stop_all() {
    log_info "Stopping SynOS development environment..."
    
    containers=("synos-consciousness-dev" "synos-kernel-dev" "synos-security-dev" "synos-ui-dev" "synos-apps-dev")
    
    for container in "${containers[@]}"; do
        if podman ps -a --format "{{.Names}}" | grep -q "^${container}$"; then
            log_info "Stopping $container..."
            podman stop "$container" || true
            podman rm "$container" || true
        fi
    done
    
    log_success "SynOS development environment stopped"
}

# Show status
show_status() {
    print_banner
    log_info "SynOS Development Environment Status"
    echo "===================================="
    
    containers=("synos-consciousness-dev" "synos-kernel-dev" "synos-security-dev" "synos-ui-dev" "synos-apps-dev")
    
    for container in "${containers[@]}"; do
        if podman ps --format "{{.Names}}" | grep -q "^${container}$"; then
            echo -e "  • $container: ${GREEN}RUNNING${NC}"
        else
            echo -e "  • $container: ${RED}STOPPED${NC}"
        fi
    done
    
    echo ""
    echo "Development Access Points:"
    echo "  • Consciousness Engine: http://localhost:9090"
    echo "  • Security Dashboard:   http://localhost:9091"  
    echo "  • UI Development:       http://localhost:8080"
    echo ""
}

# Shell access
shell_access() {
    local component="${1:-}"
    
    if [[ -z "$component" ]]; then
        log_error "Please specify a component for shell access"
        echo "Available components: synos-consciousness-dev, synos-kernel-dev, synos-security-dev, synos-ui-dev, synos-apps-dev"
        return 1
    fi
    
    if podman ps --format "{{.Names}}" | grep -q "^${component}$"; then
        log_info "Opening shell in $component..."
        podman exec -it "$component" /bin/bash
    else
        log_error "Component $component is not running"
        return 1
    fi
}

# Test framework
run_tests() {
    log_info "Running SynOS integration tests..."
    
    # Simple connectivity tests
    containers=("synos-consciousness-dev" "synos-kernel-dev" "synos-security-dev" "synos-ui-dev" "synos-apps-dev")
    
    for container in "${containers[@]}"; do
        if podman ps --format "{{.Names}}" | grep -q "^${container}$"; then
            echo -e "  • $container: ${GREEN}✓ RUNNING${NC}"
        else
            echo -e "  • $container: ${RED}✗ STOPPED${NC}"
        fi
    done
    
    log_success "Basic connectivity tests completed"
}

# Help
show_help() {
    print_banner
    echo "SynOS Podman Development Orchestrator"
    echo ""
    echo "Usage: ./synos-podman <command> [options]"
    echo ""
    echo "Commands:"
    echo -e "  ${GREEN}start${NC}                Start all development components"
    echo -e "  ${GREEN}stop${NC}                 Stop all development components"
    echo -e "  ${GREEN}status${NC}               Show environment status"
    echo -e "  ${GREEN}shell <component>${NC}    Open shell in component container"
    echo -e "  ${GREEN}test${NC}                 Run basic integration tests"
    echo -e "  ${GREEN}help${NC}                 Show this help message"
    echo ""
    echo "Components:"
    echo "  • synos-consciousness-dev  - Neural Darwinism consciousness engine"
    echo "  • synos-kernel-dev         - Custom kernel with eBPF framework"
    echo "  • synos-security-dev       - Security orchestration system"
    echo "  • synos-ui-dev             - Adaptive user interface"
    echo "  • synos-apps-dev           - Application ecosystem"
    echo ""
    echo "Examples:"
    echo "  ./synos-podman start                        # Start all components"
    echo "  ./synos-podman shell synos-kernel-dev       # Open shell in kernel container"
    echo "  ./synos-podman status                       # Check component status"
    echo ""
}

# Main command handler
main() {
    local command="${1:-help}"
    
    case "$command" in
        "start")
            start_all
            ;;
        "stop")
            stop_all
            ;;
        "status")
            show_status
            ;;
        "shell")
            shell_access "${2:-}"
            ;;
        "test")
            run_tests
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            log_error "Unknown command: $command"
            show_help
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"
