#!/bin/bash

# SynOS Ultimate Docker Development Orchestrator
# Complete kernel-to-UI development with consciousness integration

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SYNOS_VERSION="1.0.0"
BUILD_DATE=$(date +%Y%m%d)
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOCKER_COMPOSE_FILE="$PROJECT_ROOT/docker-compose.yml"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_phase() {
    echo -e "${PURPLE}[PHASE]${NC} $1"
}

log_component() {
    echo -e "${CYAN}[COMPONENT]${NC} $1"
}

# ASCII Art Banner
print_banner() {
    echo -e "${CYAN}"
    cat << 'EOF'
 ____              ___  ____  
/ ___| _   _ _ __  / _ \/ ___| 
\___ \| | | | '_ \| | | \___ \ 
 ___) | |_| | | | | |_| |___) |
|____/ \__, |_| |_|\___/|____/ 
       |___/                  

Neural Darwinism Enhanced Security OS
Complete Docker Development Environment
EOF
    echo -e "${NC}"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking development prerequisites..."
    
    local missing=()
    
    # Check required tools
    for tool in docker docker-compose git python3; do
        if ! command -v "$tool" &> /dev/null; then
            missing+=("$tool")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        log_error "Missing required tools: ${missing[*]}"
        log_info "Install missing tools and try again."
        exit 1
    fi
    
    # Check Docker daemon
    if ! docker info &> /dev/null; then
        log_error "Docker daemon not running or not accessible"
        log_info "Start Docker and ensure user has permissions"
        exit 1
    fi
    
    # Check available disk space (need at least 10GB)
    local available_kb=$(df "$PROJECT_ROOT" | awk 'NR==2 {print $4}')
    local available_gb=$((available_kb / 1024 / 1024))
    
    if [[ $available_gb -lt 10 ]]; then
        log_warning "Low disk space: ${available_gb}GB available (recommend 10GB+)"
    fi
    
    log_success "Prerequisites check passed"
}

# Initialize development environment
init_environment() {
    log_phase "Initializing SynOS development environment..."
    
    # Create necessary directories
    mkdir -p "$PROJECT_ROOT"/{logs,data,build,iso-output}
    
    # Create environment file
    cat > "$PROJECT_ROOT/.env" << EOF
# SynOS Development Environment
SYNOS_VERSION=$SYNOS_VERSION
BUILD_DATE=$BUILD_DATE
PROJECT_ROOT=$PROJECT_ROOT
CONSCIOUSNESS_LEVEL=0.75
NEURAL_POPULATION=100
LEARNING_RATE=0.1
SECURITY_MONITORING=enabled
UI_ADAPTATION=enabled
EOF
    
    log_success "Environment initialized"
}

# Component management functions
start_component() {
    local component=$1
    log_component "Starting $component development environment..."
    
    docker-compose -f "$DOCKER_COMPOSE_FILE" up -d "$component"
    
    # Wait for component to be healthy
    local max_wait=60
    local wait_time=0
    
    while [[ $wait_time -lt $max_wait ]]; do
        if docker-compose -f "$DOCKER_COMPOSE_FILE" ps "$component" | grep -q "Up"; then
            log_success "$component is running"
            return 0
        fi
        sleep 2
        ((wait_time += 2))
    done
    
    log_error "$component failed to start within ${max_wait}s"
    return 1
}

stop_component() {
    local component=$1
    log_component "Stopping $component..."
    
    docker-compose -f "$DOCKER_COMPOSE_FILE" stop "$component"
    log_success "$component stopped"
}

# Development workflow commands
cmd_start() {
    local component=${1:-"all"}
    
    log_phase "Starting SynOS development components..."
    
    if [[ "$component" == "all" ]]; then
        # Start components in dependency order
        local components=(
            "synos-consciousness-dev"
            "synos-kernel-dev" 
            "synos-security-dev"
            "synos-ui-dev"
            "synos-apps-dev"
        )
        
        for comp in "${components[@]}"; do
            start_component "$comp"
        done
        
        # Show status
        cmd_status
        
    else
        start_component "$component"
    fi
}

cmd_stop() {
    local component=${1:-"all"}
    
    log_phase "Stopping SynOS development components..."
    
    if [[ "$component" == "all" ]]; then
        docker-compose -f "$DOCKER_COMPOSE_FILE" down
        log_success "All components stopped"
    else
        stop_component "$component"
    fi
}

cmd_status() {
    log_phase "SynOS Development Environment Status"
    echo ""
    
    # Component status
    local components=(
        "synos-consciousness-dev:Consciousness Engine"
        "synos-kernel-dev:Custom Kernel"
        "synos-security-dev:eBPF Security"
        "synos-ui-dev:Adaptive UI"
        "synos-apps-dev:Application Ecosystem"
    )
    
    for comp_info in "${components[@]}"; do
        IFS=':' read -r container_name display_name <<< "$comp_info"
        
        if docker-compose -f "$DOCKER_COMPOSE_FILE" ps "$container_name" | grep -q "Up"; then
            echo -e "  ✅ ${display_name}: ${GREEN}Running${NC}"
        else
            echo -e "  ❌ ${display_name}: ${RED}Stopped${NC}"
        fi
    done
    
    echo ""
    
    # Service endpoints
    log_info "Development Endpoints:"
    echo "  🧠 Consciousness API: http://localhost:9090"
    echo "  🛡️ Security Dashboard: http://localhost:9091"
    echo "  🎨 UI Dashboard: http://localhost:8080"
    echo "  🔧 Dev Tools: http://localhost:8888"
    echo ""
}

cmd_logs() {
    local component=${1:-"synos-consciousness-dev"}
    
    log_component "Showing logs for $component..."
    docker-compose -f "$DOCKER_COMPOSE_FILE" logs -f "$component"
}

cmd_shell() {
    local component=${1:-"synos-consciousness-dev"}
    
    log_component "Opening shell in $component..."
    docker-compose -f "$DOCKER_COMPOSE_FILE" exec "$component" /bin/bash
}

cmd_test() {
    log_phase "Running SynOS integration tests..."
    
    # Start test suite
    docker-compose -f "$DOCKER_COMPOSE_FILE" up -d synos-test-suite
    
    # Run tests
    docker-compose -f "$DOCKER_COMPOSE_FILE" exec synos-test-suite python3 -m pytest /workspace/tests/ -v
    
    log_success "Tests completed"
}

cmd_build() {
    log_phase "Building complete SynOS system..."
    
    # Start all components
    cmd_start all
    
    # Wait for consciousness to be ready
    log_info "Waiting for consciousness engine to initialize..."
    sleep 10
    
    # Start complete system integration
    start_component "synos-complete-system"
    
    # Monitor build process
    log_info "Monitoring complete system build..."
    docker-compose -f "$DOCKER_COMPOSE_FILE" logs -f synos-complete-system
}

cmd_iso() {
    log_phase "Generating SynOS production ISO..."
    
    # Ensure complete system is built
    cmd_build
    
    # Generate ISO
    log_info "Starting ISO generation process..."
    docker-compose -f "$DOCKER_COMPOSE_FILE" exec synos-complete-system /workspace/scripts/generate-iso.sh
    
    # Copy ISO to output directory
    local iso_name="SynOS-v${SYNOS_VERSION}-${BUILD_DATE}.iso"
    docker cp "$(docker-compose -f "$DOCKER_COMPOSE_FILE" ps -q synos-complete-system):/workspace/iso/${iso_name}" "$PROJECT_ROOT/iso-output/"
    
    log_success "ISO generated: $PROJECT_ROOT/iso-output/$iso_name"
}

cmd_clean() {
    log_phase "Cleaning development environment..."
    
    # Stop all containers
    docker-compose -f "$DOCKER_COMPOSE_FILE" down -v
    
    # Remove images if requested
    if [[ "${1:-}" == "--images" ]]; then
        log_warning "Removing all SynOS Docker images..."
        docker images | grep synos | awk '{print $3}' | xargs -r docker rmi -f
    fi
    
    # Clean build artifacts
    rm -rf "$PROJECT_ROOT"/{logs,data,build,iso-output}/*
    
    log_success "Environment cleaned"
}

cmd_monitor() {
    log_phase "Starting SynOS development monitor..."
    
    # Create monitoring dashboard
    cat > "$PROJECT_ROOT/monitor.html" << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>SynOS Development Monitor</title>
    <meta http-equiv="refresh" content="5">
    <style>
        body { font-family: monospace; background: #001122; color: white; margin: 20px; }
        .status { margin: 10px 0; padding: 10px; border: 1px solid #00CCAA; border-radius: 5px; }
        .running { background: #003300; }
        .stopped { background: #330000; }
        h1 { color: #00CCAA; }
    </style>
</head>
<body>
    <h1>🧠 SynOS Development Monitor</h1>
    <div id="status">Loading...</div>
    <script>
        // Auto-refresh functionality would go here
        // This is a basic template
    </script>
</body>
</html>
EOF
    
    log_info "Development monitor created: $PROJECT_ROOT/monitor.html"
    
    # Open in browser if available
    if command -v xdg-open &> /dev/null; then
        xdg-open "$PROJECT_ROOT/monitor.html"
    fi
}

# Help system
show_help() {
    echo -e "${CYAN}SynOS Ultimate Docker Development Orchestrator${NC}"
    echo ""
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  ${GREEN}start [component]${NC}     Start development environment (all components or specific)"
    echo "  ${GREEN}stop [component]${NC}      Stop development environment"
    echo "  ${GREEN}status${NC}               Show environment status and endpoints"
    echo "  ${GREEN}logs [component]${NC}      Show logs for component"
    echo "  ${GREEN}shell [component]${NC}     Open shell in component container"
    echo "  ${GREEN}test${NC}                 Run integration test suite"
    echo "  ${GREEN}build${NC}                Build complete SynOS system"
    echo "  ${GREEN}iso${NC}                  Generate production ISO"
    echo "  ${GREEN}clean [--images]${NC}     Clean environment (optionally remove images)"
    echo "  ${GREEN}monitor${NC}              Start development monitor dashboard"
    echo "  ${GREEN}help${NC}                 Show this help message"
    echo ""
    echo "Components:"
    echo "  • synos-consciousness-dev  - Neural Darwinism consciousness engine"
    echo "  • synos-kernel-dev         - Custom kernel with eBPF framework"
    echo "  • synos-security-dev       - Security orchestration system"
    echo "  • synos-ui-dev             - Adaptive user interface"
    echo "  • synos-apps-dev           - Application ecosystem"
    echo ""
    echo "Examples:"
    echo "  $0 start                   # Start all components"
    echo "  $0 start synos-ui-dev      # Start only UI development"
    echo "  $0 shell synos-kernel-dev  # Open shell in kernel container"
    echo "  $0 build                   # Build complete system"
    echo "  $0 iso                     # Generate production ISO"
    echo ""
}

# Main execution
main() {
    print_banner
    
    # Change to project directory
    cd "$PROJECT_ROOT"
    
    check_prerequisites
    init_environment
    
    # Handle commands
    case "${1:-help}" in
        "start")
            cmd_start "${2:-all}"
            ;;
        "stop")
            cmd_stop "${2:-all}"
            ;;
        "status")
            cmd_status
            ;;
        "logs")
            cmd_logs "${2:-synos-consciousness-dev}"
            ;;
        "shell")
            cmd_shell "${2:-synos-consciousness-dev}"
            ;;
        "test")
            cmd_test
            ;;
        "build")
            cmd_build
            ;;
        "iso")
            cmd_iso
            ;;
        "clean")
            cmd_clean "${2:-}"
            ;;
        "monitor")
            cmd_monitor
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            log_error "Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
