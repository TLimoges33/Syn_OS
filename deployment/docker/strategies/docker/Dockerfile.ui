# SynOS UI Development Container
# Adaptive consciousness-aware interface development

FROM ubuntu:22.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install UI development dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    python3-tk \
    python3-pyqt6 \
    python3-pyqt6.qtwebengine \
    qt6-base-dev \
    qt6-tools-dev \
    gtk+3.0-dev \
    libgtk-3-dev \
    nodejs \
    npm \
    git \
    vim \
    curl \
    wget \
    htop \
    xvfb \
    x11-utils \
    x11-apps \
    mesa-utils \
    firefox \
    chromium-browser \
    && rm -rf /var/lib/apt/lists/*

# Install Python UI and web libraries
RUN pip3 install --no-cache-dir \
    rich \
    typer \
    pydantic \
    fastapi \
    uvicorn \
    jinja2 \
    websockets \
    aiohttp \
    requests \
    psutil \
    pillow \
    opencv-python \
    matplotlib \
    seaborn \
    plotly \
    dash \
    streamlit \
    tkinter-tooltip \
    customtkinter

# Install Node.js dependencies for web UI
RUN npm install -g \
    create-react-app \
    next \
    express \
    socket.io \
    three.js \
    d3

# Set up workspace
WORKDIR /workspace

# Create UI directories
RUN mkdir -p /workspace/{ui,ux,themes,components,interfaces,web,desktop}

# Set environment variables
ENV UI_ROOT=/workspace/ui
ENV UX_ROOT=/workspace/ux
ENV DISPLAY=:99
ENV QT_X11_NO_MITSHM=1

# Create UI development user
RUN useradd -m -s /bin/bash uiux && \
    usermod -aG sudo uiux && \
    echo "uiux ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Copy UI development scripts
COPY scripts/ui-dev/ /workspace/scripts/

# Make scripts executable
RUN chmod +x /workspace/scripts/*.sh

# Set up consciousness-aware desktop environment
RUN echo '#!/usr/bin/env python3' > /workspace/consciousness_desktop.py && \
    echo 'import tkinter as tk' >> /workspace/consciousness_desktop.py && \
    echo 'from tkinter import ttk' >> /workspace/consciousness_desktop.py && \
    echo 'import requests' >> /workspace/consciousness_desktop.py && \
    echo 'import threading' >> /workspace/consciousness_desktop.py && \
    echo 'import time' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo 'class ConsciousnessDesktop:' >> /workspace/consciousness_desktop.py && \
    echo '    def __init__(self):' >> /workspace/consciousness_desktop.py && \
    echo '        self.root = tk.Tk()' >> /workspace/consciousness_desktop.py && \
    echo '        self.root.title("🧠 SynOS Consciousness Desktop")' >> /workspace/consciousness_desktop.py && \
    echo '        self.root.geometry("1200x800")' >> /workspace/consciousness_desktop.py && \
    echo '        self.root.configure(bg="#001122")' >> /workspace/consciousness_desktop.py && \
    echo '        self.consciousness_level = 0.0' >> /workspace/consciousness_desktop.py && \
    echo '        self.setup_ui()' >> /workspace/consciousness_desktop.py && \
    echo '        self.start_consciousness_sync()' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '    def setup_ui(self):' >> /workspace/consciousness_desktop.py && \
    echo '        # Main title' >> /workspace/consciousness_desktop.py && \
    echo '        title = tk.Label(self.root, text="SynOS Neural Darwinism Desktop",' >> /workspace/consciousness_desktop.py && \
    echo '                        fg="#00CCAA", bg="#001122", font=("Arial", 24, "bold"))' >> /workspace/consciousness_desktop.py && \
    echo '        title.pack(pady=20)' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '        # Consciousness level indicator' >> /workspace/consciousness_desktop.py && \
    echo '        self.consciousness_label = tk.Label(self.root, text="Consciousness Level: 0%",' >> /workspace/consciousness_desktop.py && \
    echo '                                           fg="#FF0000", bg="#001122", font=("Arial", 16))' >> /workspace/consciousness_desktop.py && \
    echo '        self.consciousness_label.pack(pady=10)' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '        # Progress bar for consciousness' >> /workspace/consciousness_desktop.py && \
    echo '        self.progress = ttk.Progressbar(self.root, length=600, mode="determinate")' >> /workspace/consciousness_desktop.py && \
    echo '        self.progress.pack(pady=10)' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '        # Adaptive theme buttons' >> /workspace/consciousness_desktop.py && \
    echo '        button_frame = tk.Frame(self.root, bg="#001122")' >> /workspace/consciousness_desktop.py && \
    echo '        button_frame.pack(pady=20)' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '        tk.Button(button_frame, text="Neural Theme", bg="#003366", fg="white",' >> /workspace/consciousness_desktop.py && \
    echo '                 command=self.apply_neural_theme).pack(side=tk.LEFT, padx=10)' >> /workspace/consciousness_desktop.py && \
    echo '        tk.Button(button_frame, text="Security Theme", bg="#330000", fg="white",' >> /workspace/consciousness_desktop.py && \
    echo '                 command=self.apply_security_theme).pack(side=tk.LEFT, padx=10)' >> /workspace/consciousness_desktop.py && \
    echo '        tk.Button(button_frame, text="Adaptive Theme", bg="#003300", fg="white",' >> /workspace/consciousness_desktop.py && \
    echo '                 command=self.apply_adaptive_theme).pack(side=tk.LEFT, padx=10)' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '    def apply_neural_theme(self):' >> /workspace/consciousness_desktop.py && \
    echo '        self.root.configure(bg="#001a33")' >> /workspace/consciousness_desktop.py && \
    echo '        print("🧠 Neural theme applied")' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '    def apply_security_theme(self):' >> /workspace/consciousness_desktop.py && \
    echo '        self.root.configure(bg="#330000")' >> /workspace/consciousness_desktop.py && \
    echo '        print("🛡️ Security theme applied")' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '    def apply_adaptive_theme(self):' >> /workspace/consciousness_desktop.py && \
    echo '        # Theme adapts to consciousness level' >> /workspace/consciousness_desktop.py && \
    echo '        if self.consciousness_level > 0.7:' >> /workspace/consciousness_desktop.py && \
    echo '            self.root.configure(bg="#003366")' >> /workspace/consciousness_desktop.py && \
    echo '        else:' >> /workspace/consciousness_desktop.py && \
    echo '            self.root.configure(bg="#001122")' >> /workspace/consciousness_desktop.py && \
    echo '        print(f"🎨 Adaptive theme for consciousness level {self.consciousness_level:.2f}")' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '    def update_consciousness(self):' >> /workspace/consciousness_desktop.py && \
    echo '        try:' >> /workspace/consciousness_desktop.py && \
    echo '            response = requests.get("http://synos-consciousness-dev:9090/status", timeout=2)' >> /workspace/consciousness_desktop.py && \
    echo '            if response.status_code == 200:' >> /workspace/consciousness_desktop.py && \
    echo '                data = response.json()' >> /workspace/consciousness_desktop.py && \
    echo '                self.consciousness_level = data.get("consciousness_level", 0)' >> /workspace/consciousness_desktop.py && \
    echo '                percentage = int(self.consciousness_level * 100)' >> /workspace/consciousness_desktop.py && \
    echo '                self.consciousness_label.config(text=f"Consciousness Level: {percentage}%")' >> /workspace/consciousness_desktop.py && \
    echo '                self.progress.config(value=percentage)' >> /workspace/consciousness_desktop.py && \
    echo '        except Exception as e:' >> /workspace/consciousness_desktop.py && \
    echo '            print(f"Consciousness sync failed: {e}")' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '    def consciousness_sync_loop(self):' >> /workspace/consciousness_desktop.py && \
    echo '        while True:' >> /workspace/consciousness_desktop.py && \
    echo '            self.update_consciousness()' >> /workspace/consciousness_desktop.py && \
    echo '            time.sleep(2)' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '    def start_consciousness_sync(self):' >> /workspace/consciousness_desktop.py && \
    echo '        thread = threading.Thread(target=self.consciousness_sync_loop, daemon=True)' >> /workspace/consciousness_desktop.py && \
    echo '        thread.start()' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo '    def run(self):' >> /workspace/consciousness_desktop.py && \
    echo '        self.root.mainloop()' >> /workspace/consciousness_desktop.py && \
    echo '' >> /workspace/consciousness_desktop.py && \
    echo 'if __name__ == "__main__":' >> /workspace/consciousness_desktop.py && \
    echo '    desktop = ConsciousnessDesktop()' >> /workspace/consciousness_desktop.py && \
    echo '    desktop.run()' >> /workspace/consciousness_desktop.py && \
    chmod +x /workspace/consciousness_desktop.py

# Set up web dashboard
RUN echo '#!/usr/bin/env python3' > /workspace/web_dashboard.py && \
    echo 'from fastapi import FastAPI, Request' >> /workspace/web_dashboard.py && \
    echo 'from fastapi.responses import HTMLResponse' >> /workspace/web_dashboard.py && \
    echo 'from fastapi.staticfiles import StaticFiles' >> /workspace/web_dashboard.py && \
    echo 'import uvicorn' >> /workspace/web_dashboard.py && \
    echo 'import requests' >> /workspace/web_dashboard.py && \
    echo '' >> /workspace/web_dashboard.py && \
    echo 'app = FastAPI(title="SynOS UI Dashboard")' >> /workspace/web_dashboard.py && \
    echo '' >> /workspace/web_dashboard.py && \
    echo '@app.get("/", response_class=HTMLResponse)' >> /workspace/web_dashboard.py && \
    echo 'async def dashboard():' >> /workspace/web_dashboard.py && \
    echo '    return """' >> /workspace/web_dashboard.py && \
    echo '    <!DOCTYPE html>' >> /workspace/web_dashboard.py && \
    echo '    <html><head><title>SynOS UI Dashboard</title>' >> /workspace/web_dashboard.py && \
    echo '    <style>' >> /workspace/web_dashboard.py && \
    echo '    body { background: linear-gradient(135deg, #001122, #003366); color: white; font-family: monospace; }' >> /workspace/web_dashboard.py && \
    echo '    .container { max-width: 1200px; margin: 0 auto; padding: 20px; }' >> /workspace/web_dashboard.py && \
    echo '    h1 { color: #00CCAA; text-align: center; font-size: 2.5em; }' >> /workspace/web_dashboard.py && \
    echo '    .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px; }' >> /workspace/web_dashboard.py && \
    echo '    .panel { background: rgba(0,0,0,0.3); padding: 20px; border-radius: 10px; border: 2px solid #00CCAA; }' >> /workspace/web_dashboard.py && \
    echo '    .metric { margin: 10px 0; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 5px; }' >> /workspace/web_dashboard.py && \
    echo '    </style></head>' >> /workspace/web_dashboard.py && \
    echo '    <body>' >> /workspace/web_dashboard.py && \
    echo '    <div class="container">' >> /workspace/web_dashboard.py && \
    echo '    <h1>🧠 SynOS Consciousness UI Dashboard</h1>' >> /workspace/web_dashboard.py && \
    echo '    <div class="grid">' >> /workspace/web_dashboard.py && \
    echo '    <div class="panel"><h3>🎨 Adaptive Theming</h3>' >> /workspace/web_dashboard.py && \
    echo '    <div class="metric">Neural Theme: Active</div>' >> /workspace/web_dashboard.py && \
    echo '    <div class="metric">Consciousness Level: 75%</div>' >> /workspace/web_dashboard.py && \
    echo '    <div class="metric">Theme Adaptation: Real-time</div></div>' >> /workspace/web_dashboard.py && \
    echo '    <div class="panel"><h3>🖥️ Interface Status</h3>' >> /workspace/web_dashboard.py && \
    echo '    <div class="metric">Desktop Environment: SynOS AI</div>' >> /workspace/web_dashboard.py && \
    echo '    <div class="metric">Consciousness Integration: Online</div>' >> /workspace/web_dashboard.py && \
    echo '    <div class="metric">Multi-Modal Input: Enabled</div></div>' >> /workspace/web_dashboard.py && \
    echo '    </div></div></body></html>' >> /workspace/web_dashboard.py && \
    echo '    """' >> /workspace/web_dashboard.py && \
    echo '' >> /workspace/web_dashboard.py && \
    echo 'if __name__ == "__main__":' >> /workspace/web_dashboard.py && \
    echo '    uvicorn.run(app, host="0.0.0.0", port=8080)' >> /workspace/web_dashboard.py && \
    chmod +x /workspace/web_dashboard.py

# Create UI startup script
RUN echo '#!/bin/bash' > /workspace/start_ui.sh && \
    echo 'echo "🎨 Starting SynOS Adaptive UI System..."' >> /workspace/start_ui.sh && \
    echo 'cd /workspace' >> /workspace/start_ui.sh && \
    echo '# Start virtual display for headless development' >> /workspace/start_ui.sh && \
    echo 'Xvfb :99 -screen 0 1920x1080x24 &' >> /workspace/start_ui.sh && \
    echo 'export DISPLAY=:99' >> /workspace/start_ui.sh && \
    echo '# Start web dashboard' >> /workspace/start_ui.sh && \
    echo 'python3 web_dashboard.py &' >> /workspace/start_ui.sh && \
    echo '# Start consciousness desktop' >> /workspace/start_ui.sh && \
    echo 'python3 consciousness_desktop.py &' >> /workspace/start_ui.sh && \
    echo 'wait' >> /workspace/start_ui.sh && \
    chmod +x /workspace/start_ui.sh

# Expose UI ports
EXPOSE 8080 8081

# Switch to UI user
USER uiux

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/ || exit 1

# Default command
CMD ["/workspace/start_ui.sh"]
