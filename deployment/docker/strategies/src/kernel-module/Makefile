# SynOS Consciousness Kernel Module Makefile
# Advanced build system for consciousness-aware kernel module

obj-m := synos_consciousness.o

# Kernel build directory - autodetect
KERNEL_DIR ?= /lib/modules/$(shell uname -r)/build

# Module information
MODULE_NAME = synos_consciousness
MODULE_VERSION = 4.2.0

# Build flags for enhanced debugging and optimization
ccflags-y := -DMODULE_VERSION=\"$(MODULE_VERSION)\" \
             -DDEBUG \
             -O2 \
             -Wall \
             -Wextra

# Default target
all: build

# Build the kernel module
build:
	@echo "üß† Building SynOS Consciousness Kernel Module v$(MODULE_VERSION)..."
	make -C $(KERNEL_DIR) M=$(PWD) modules
	@echo "‚úÖ Build complete!"

# Clean build artifacts
clean:
	@echo "üßπ Cleaning build artifacts..."
	make -C $(KERNEL_DIR) M=$(PWD) clean
	rm -f *.symvers *.order *.mod.c
	@echo "‚úÖ Clean complete!"

# Install the module
install: build
	@echo "üì¶ Installing SynOS Consciousness Module..."
	sudo make -C $(KERNEL_DIR) M=$(PWD) modules_install
	sudo depmod -a
	@echo "‚úÖ Installation complete!"

# Load the module
load: install
	@echo "üöÄ Loading SynOS Consciousness Module..."
	sudo modprobe $(MODULE_NAME)
	@echo "‚úÖ Module loaded successfully!"
	@echo "üìä Module information:"
	@lsmod | grep $(MODULE_NAME) || echo "‚ùå Module not found in lsmod"
	@echo "üîç Device information:"
	@ls -la /dev/synos 2>/dev/null || echo "‚ùå Device file not created"

# Unload the module
unload:
	@echo "üõë Unloading SynOS Consciousness Module..."
	sudo rmmod $(MODULE_NAME) 2>/dev/null || echo "‚ÑπÔ∏è Module was not loaded"
	@echo "‚úÖ Module unloaded!"

# Remove/uninstall the module
remove: unload
	@echo "üóëÔ∏è Removing SynOS Consciousness Module..."
	sudo rm -f /lib/modules/$(shell uname -r)/extra/$(MODULE_NAME).ko
	sudo depmod -a
	@echo "‚úÖ Module removed!"

# Test the module
test: load
	@echo "üß™ Testing SynOS Consciousness Module..."
	@echo "üìã Checking kernel messages..."
	@dmesg | tail -10 | grep -i synos || echo "‚ö†Ô∏è No SynOS messages in dmesg"
	@echo "üîç Checking device file..."
	@ls -la /dev/synos || echo "‚ùå Device file not found"
	@echo "üìä Checking proc entry..."
	@ls -la /proc/synos_consciousness 2>/dev/null || echo "‚ÑπÔ∏è Proc entry not found (may be normal)"
	@echo "üîç Module information:"
	@modinfo $(MODULE_NAME).ko | head -10

# Debug mode - load with verbose kernel messages
debug: build
	@echo "üêõ Loading module in debug mode..."
	sudo dmesg -C  # Clear kernel messages
	sudo insmod ./$(MODULE_NAME).ko
	@echo "üìã Recent kernel messages:"
	@dmesg | tail -20

# Monitor kernel messages in real-time
monitor:
	@echo "üì° Monitoring kernel messages for SynOS..."
	@echo "Press Ctrl+C to stop monitoring"
	sudo dmesg -w | grep --line-buffered -i synos

# Show module status
status:
	@echo "üìä SynOS Consciousness Module Status"
	@echo "===================================="
	@echo "üîç Module loaded:"
	@lsmod | grep $(MODULE_NAME) && echo "‚úÖ YES" || echo "‚ùå NO"
	@echo "üîç Device file:"
	@ls -la /dev/synos 2>/dev/null && echo "‚úÖ EXISTS" || echo "‚ùå MISSING"
	@echo "üîç Kernel version compatibility:"
	@uname -r
	@echo "üîç Build directory:"
	@echo "$(KERNEL_DIR)"

# Validate module and dependencies
validate: build
	@echo "‚úÖ Validating SynOS Consciousness Module..."
	@echo "üîç Module information:"
	@modinfo $(MODULE_NAME).ko
	@echo "üîç Symbol dependencies:"
	@objdump -t $(MODULE_NAME).ko | grep UND | head -10 || echo "‚ÑπÔ∏è No undefined symbols found"
	@echo "üîç Module size:"
	@ls -lh $(MODULE_NAME).ko

# Development help
help:
	@echo "üß† SynOS Consciousness Kernel Module Build System"
	@echo "================================================="
	@echo ""
	@echo "Available targets:"
	@echo "  build     - Compile the kernel module"
	@echo "  clean     - Remove build artifacts"
	@echo "  install   - Install module to system"
	@echo "  load      - Load the module into kernel"
	@echo "  unload    - Unload the module from kernel"
	@echo "  remove    - Completely remove module from system"
	@echo "  test      - Load and test module functionality"
	@echo "  debug     - Load with debug output"
	@echo "  monitor   - Monitor kernel messages in real-time"
	@echo "  status    - Show current module status"
	@echo "  validate  - Validate module build and dependencies"
	@echo "  help      - Show this help message"
	@echo ""
	@echo "Usage examples:"
	@echo "  make build          # Just compile"
	@echo "  make test           # Full build, install, load, and test"
	@echo "  make debug          # Load with verbose debugging"
	@echo "  make monitor        # Watch kernel messages"
	@echo "  make clean remove   # Complete cleanup"
	@echo ""
	@echo "Module: $(MODULE_NAME) v$(MODULE_VERSION)"
	@echo "Kernel: $(shell uname -r)"

# Quick development cycle
dev: clean build debug

# Complete build and test cycle
full: clean build install test

# Safety target to prevent accidental makes
.PHONY: all build clean install load unload remove test debug monitor status validate help dev full