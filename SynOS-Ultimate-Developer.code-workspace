{
  // üéØ SynOS Ultimate Cybersecurity Education & MSSP Platform
  // Comprehensive development environment for Linux distribution creation
  // Designed for cybersecurity career pivot and professional consulting business

  "folders": [
    {
      "name": "üß† SynOS Linux Distribution (Root)",
      "path": "."
    },
    {
      "name": "ü§ñ AI Engine & Consciousness System",
      "path": "./src/ai-engine"
    },
    {
      "name": "üîß Kernel Core & System",
      "path": "./src/kernel"
    },
    {
      "name": "üõ°Ô∏è Security Framework & Tools",
      "path": "./core/security"
    },
    {
      "name": "üêß Linux Distribution Builder",
      "path": "./linux-distribution"
    },
    {
      "name": "üöÄ Build & Deployment Scripts",
      "path": "./scripts"
    },
    {
      "name": "üß™ Testing & Validation Suite",
      "path": "./tests"
    },
    {
      "name": "üìö Documentation & Architecture",
      "path": "./docs"
    },
    {
      "name": "‚öôÔ∏è Configuration & Configs",
      "path": "./configs"
    },
    {
      "name": "üîß Core Components",
      "path": "./core"
    },
    {
      "name": "üîó Integration & Services",
      "path": "./integration"
    },
    {
      "name": "‚ö° Operations & Monitoring",
      "path": "./operations"
    },
    {
      "name": "üõ†Ô∏è Development Tools",
      "path": "./development"
    }
  ],
  "settings": {
    // ü¶Ä Rust Language Server Optimization
    "rust-analyzer.cargo.features": [
      "consciousness",
      "ai-bridge",
      "educational",
      "security-enhanced",
      "cybersec-tools",
      "mssp-platform",
      "red-team-tools",
      "blue-team-defense"
    ],
    "rust-analyzer.cargo.target": "x86_64-unknown-none",
    "rust-analyzer.checkOnSave.command": "clippy",
    "rust-analyzer.checkOnSave.allTargets": false,
    "rust-analyzer.cargo.buildScripts.enable": true,
    "rust-analyzer.procMacro.enable": true,
    "rust-analyzer.linkedProjects": [
      "Cargo.toml",
      "src/ai-engine/Cargo.toml",
      "core/security/Cargo.toml",
      "src/kernel/Cargo.toml"
    ],
    "rust-analyzer.files.excludeDirs": [
      "archive",
      "archive-consolidated",
      "backup",
      "backup-*",
      "custom-os-development",
      "linux-distribution/SynOS-Linux-Builder/build",
      "development/complete-docker-strategy",
      "multi_cloud",
      "advanced_ai/archive",
      "logs",
      "results",
      "reports",
      "target",
      "build"
    ],
    "rust-analyzer.cargo.unsetTest": ["archive", "custom-os-development", "backup"],

    // üöÄ Performance & Memory Optimization
    "workbench.editor.limit.enabled": true,
    "workbench.editor.limit.value": 8,
    "files.maxMemoryForLargeFilesMB": 1024,
    "search.maxResults": 5000,
    "search.smartCase": true,
    "search.useIgnoreFiles": true,

    // üé≠ Interface & Experience
    "workbench.colorTheme": "Default Dark+",
    "workbench.iconTheme": "vs-seti",
    "workbench.startupEditor": "readme",
    "workbench.enableExperiments": false,
    "workbench.editor.enablePreview": false,
    "workbench.editor.showTabs": "multiple",

    // üîí Privacy & Security
    "telemetry.telemetryLevel": "off",
    "update.mode": "manual",
    "extensions.autoCheckUpdates": false,
    "extensions.autoUpdate": false,

    // üìÅ File Associations for Linux Distribution Development
    "files.associations": {
      "*.deb": "binary",
      "*.iso": "binary",
      "*.squashfs": "binary",
      "Dockerfile*": "dockerfile",
      "*.service": "systemd",
      "*.socket": "systemd",
      "*.timer": "systemd",
      "*.target": "systemd",
      "*.mount": "systemd",
      "*.automount": "systemd",
      "*.desktop": "desktop",
      "*.rules": "udev",
      "sources.list*": "debian-sources",
      "*.preseed": "debian-preseed",
      "*.list": "debian-sources",
      "*.rs": "rust",
      "*.toml": "toml",
      "*.md": "markdown",
      "*.sh": "shellscript",
      "*.py": "python",
      "*.yml": "yaml",
      "*.yaml": "yaml",
      "*.conf": "properties",
      "*.cfg": "properties",
      "Makefile*": "makefile",
      "*.mk": "makefile"
    },

    // üëÅÔ∏è File & Directory Exclusions
    "files.exclude": {
      "**/target": true,
      "**/.venv": true,
      "**/venv": true,
      "**/venv_*": true,
      "**/perf_env": true,
      "**/performance_env": true,
      "**/node_modules": true,
      "**/.git/objects": true,
      "**/.git/logs": true,
      "**/logs": true,
      "**/test_reports": true,
      "**/results": true,
      "**/archive": true,
      "**/archive-consolidated": true,
      "**/build/logs": true,
      "**/build/chroot": true,
      "**/linux-distribution/SynOS-Linux-Builder/build": true,
      "**/dist": true,
      "**/.cache": true,
      "**/tmp": true,
      "**/temp": true,
      "**/*.tmp": true,
      "**/*.log": true,
      "**/*.pyc": true,
      "**/__pycache__": true,
      "**/advanced_ai": true,
      "**/cloud_native": true,
      "**/edge_computing": true,
      "**/enterprise": true,
      "**/galactic": true,
      "**/global_infrastructure": true,
      "**/multi_cloud": true,
      "**/.pytest_cache": true,
      "**/coverage": true,
      "**/.coverage": true
    },

    "files.watcherExclude": {
      "**/target/**": true,
      "**/.venv/**": true,
      "**/venv*/**": true,
      "**/node_modules/**": true,
      "**/.git/**": true,
      "**/logs/**": true,
      "**/test_reports/**": true,
      "**/results/**": true,
      "**/archive/**": true,
      "**/archive-consolidated/**": true,
      "**/build/**": true,
      "**/dist/**": true,
      "**/.cache/**": true,
      "**/tmp/**": true,
      "**/temp/**": true,
      "**/linux-distribution/SynOS-Linux-Builder/build/**": true,
      "**/development/complete-docker-strategy/**": true,
      "**/multi_cloud/**": true,
      "**/advanced_ai/**": true
    },

    "search.exclude": {
      "**/target": true,
      "**/Cargo.lock": true,
      "**/.venv": true,
      "**/venv*": true,
      "**/node_modules": true,
      "**/logs": true,
      "**/archive": true,
      "**/archive-consolidated": true,
      "**/build": true,
      "**/dist": true,
      "**/linux-distribution/SynOS-Linux-Builder/build": true,
      "**/development/complete-docker-strategy": true,
      "**/multi_cloud": true,
      "**/advanced_ai": true
    },

    // ‚úèÔ∏è Editor Configuration
    "editor.tabSize": 4,
    "editor.insertSpaces": true,
    "editor.detectIndentation": true,
    "editor.rulers": [100, 120],
    "editor.wordWrap": "on",
    "editor.minimap.enabled": true,
    "editor.codeLens": true,
    "editor.inlayHints.enabled": "on",
    "editor.bracketPairColorization.enabled": true,
    "editor.guides.bracketPairs": true,
    "editor.formatOnSave": true,
    "editor.formatOnPaste": true,
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit",
      "source.organizeImports": "explicit",
      "source.removeUnusedImports": "explicit"
    },
    "editor.quickSuggestions": {
      "other": true,
      "comments": false,
      "strings": true
    },
    "editor.suggest.enabled": true,
    "editor.suggest.showSnippets": true,
    "editor.semanticHighlighting.enabled": true,

    // üíª Terminal Configuration
    "terminal.integrated.defaultProfile.linux": "SynOS Development Shell",
    "terminal.integrated.inheritEnv": true,
    "terminal.integrated.cwd": "${workspaceFolder}",
    "terminal.integrated.profiles.linux": {
      "bash": {
        "path": "/bin/bash",
        "args": ["-l"],
        "icon": "terminal-bash",
        "env": {
          "TERM": "xterm-256color"
        }
      },
      "SynOS Development Shell": {
        "path": "/bin/bash",
        "args": ["-l"],
        "icon": "gear",
        "env": {
          "RUST_BACKTRACE": "1",
          "SYNOS_DEV_MODE": "1",
          "CARGO_TARGET_DIR": "${workspaceFolder}/target",
          "CARGO_BUILD_JOBS": "2",
          "PYTHONDONTWRITEBYTECODE": "1",
          "PATH": "${workspaceFolder}/scripts:${env:PATH}",
          "SYNOS_PROJECT_ROOT": "${workspaceFolder}",
          "CYBERSEC_TOOLS_PATH": "${workspaceFolder}/core/security/tools"
        }
      },
      "Security Testing Shell": {
        "path": "/bin/bash",
        "args": ["-l"],
        "icon": "shield",
        "env": {
          "RUST_BACKTRACE": "full",
          "SYNOS_SECURITY_MODE": "1",
          "PATH": "${workspaceFolder}/scripts:${workspaceFolder}/core/security/tools:${env:PATH}"
        }
      }
    },
    "terminal.integrated.fontFamily": "monospace",
    "terminal.integrated.fontSize": 12,
    "terminal.integrated.rendererType": "canvas",

    // üîÑ Git Configuration
    "git.autofetch": false,
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    "git.ignoreLimitWarning": true,
    "git.suggestSmartCommit": false,
    "git.openRepositoryInParentFolders": "never",

    // üêç Python Configuration
    "python.analysis.typeCheckingMode": "basic",
    "python.analysis.autoImportCompletions": true,
    "python.analysis.autoSearchPaths": true,
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": true,
    "python.formatting.provider": "black",
    "python.terminal.activateEnvironment": true,

    // üîß C/C++ Configuration
    "C_Cpp.intelliSenseEngine": "default",
    "C_Cpp.errorSquiggles": "enabled",
    "C_Cpp.autocomplete": "default",
    "C_Cpp.enhancedColorization": "enabled",

    // üî® Build & Make Configuration
    "makefile.configureOnOpen": true,
    "cmake.configureOnOpen": false,

    // üê≥ Docker Configuration
    "docker.showStartPage": false,

    // üìù Markdown Configuration
    "markdown.preview.breaks": true,
    "markdown.preview.linkify": true,

    // üîç Shell Script Configuration
    "shellcheck.enable": true,
    "shellcheck.run": "onSave",

    // üì¶ Extension Specific Settings
    "cSpell.words": [
      "SynOS",
      "cybersec",
      "mssp",
      "debian",
      "systemd",
      "chroot",
      "squashfs",
      "preseed",
      "udev",
      "AppArmor",
      "SELinux"
    ]
  },
  "extensions": {
    "recommendations": [
      // Core Language Support
      "rust-lang.rust-analyzer",
      "ms-vscode.cpptools",
      "ms-vscode.cpptools-extension-pack",
      "ms-python.python",
      "ms-python.pylint",
      "ms-pyright.pyright",
      "ms-vscode.makefile-tools",
      "twxs.cmake",
      "ms-vscode.cmake-tools",

      // Assembly and Low-Level Development
      "13xforever.language-x86-64-assembly",
      "maziac.asm-code-lens",
      "ms-vscode.hexeditor",
      "ms-vscode.vscode-embedded-tools",

      // Debugging and Analysis
      "vadimcn.vscode-lldb",
      "webfreak.debug",
      "rogalmic.bash-debug",

      // Documentation and Diagramming
      "yzhang.markdown-all-in-one",
      "hediet.vscode-drawio",
      "davidanson.vscode-markdownlint",

      // Git and Version Control
      "eamodio.gitlens",
      "github.vscode-pull-request-github",
      "donjayamanne.githistory",

      // Security and Code Quality
      "snyk-security.snyk-vulnerability-scanner",
      "streetsidesoftware.code-spell-checker",
      "timonwong.shellcheck",

      // Container and Virtualization
      "ms-azuretools.vscode-docker",

      // Productivity and Code Quality
      "formulahendry.code-runner",
      "aaron-bond.better-comments",
      "esbenp.prettier-vscode",
      "editorconfig.editorconfig",
      "emeraldwalk.runonsave",

      // Data and Configuration
      "tamasfe.even-better-toml",
      "redhat.vscode-yaml",
      "ms-vscode.vscode-json",

      // Linux Distribution Development
      "ms-vscode.test-adapter-converter",
      "serayuzgur.crates"
    ]
  },
  "tasks": {
    "version": "2.0.0",
    "tasks": [
      {
        "label": "üî® Build Complete Workspace",
        "type": "shell",
        "command": "cargo",
        "args": ["build", "--workspace", "--all-features"],
        "group": {
          "kind": "build",
          "isDefault": true
        },
        "presentation": {
          "echo": true,
          "reveal": "always",
          "focus": false,
          "panel": "shared"
        },
        "problemMatcher": ["$rustc"]
      },
      {
        "label": "üß™ Run Complete Test Suite",
        "type": "shell",
        "command": "make",
        "args": ["test-all"],
        "group": {
          "kind": "test",
          "isDefault": true
        },
        "presentation": {
          "echo": true,
          "reveal": "always"
        }
      },
      {
        "label": "ü§ñ Build AI Engine",
        "type": "shell",
        "command": "cargo",
        "args": ["build", "--manifest-path", "src/ai-engine/Cargo.toml", "--features", "consciousness,ai-bridge"],
        "group": "build",
        "presentation": {
          "echo": true,
          "reveal": "silent"
        }
      },
      {
        "label": "üîß Build Kernel",
        "type": "shell",
        "command": "cargo",
        "args": [
          "build",
          "--manifest-path",
          "src/kernel/Cargo.toml",
          "--target",
          "x86_64-unknown-none"
        ],
        "group": "build"
      },
      {
        "label": "üõ°Ô∏è Build Security Framework",
        "type": "shell",
        "command": "cargo",
        "args": ["build", "--manifest-path", "core/security/Cargo.toml", "--features", "security-enhanced,cybersec-tools"],
        "group": "build"
      },
      {
        "label": "üêß Build SynOS Linux Distribution",
        "type": "shell",
        "command": "./scripts/build-synos-ultimate-final.sh",
        "group": "build",
        "presentation": {
          "echo": true,
          "reveal": "always"
        },
        "options": {
          "cwd": "${workspaceFolder}"
        }
      },
      {
        "label": "üöÄ Build Production ISO",
        "type": "shell",
        "command": "./scripts/build-production-iso.sh",
        "group": "build",
        "presentation": {
          "echo": true,
          "reveal": "always"
        }
      },
      {
        "label": "üß† Start Consciousness Services",
        "type": "shell",
        "command": "systemctl",
        "args": ["--user", "start", "synos-consciousness"],
        "group": "test"
      },
      {
        "label": "üìä Run Comprehensive Security Audit",
        "type": "shell",
        "command": "python3",
        "args": ["scripts/maintenance/audit/comprehensive_security_audit.py"],
        "group": "test"
      },
      {
        "label": "üîç Vulnerability Scan",
        "type": "shell",
        "command": "./scripts/security/vulnerability-scan.sh",
        "group": "test"
      },
      {
        "label": "üßπ Clean All Build Artifacts",
        "type": "shell",
        "command": "make",
        "args": ["clean-all"],
        "group": "build"
      },
      {
        "label": "üì¶ Package Distribution",
        "type": "shell",
        "command": "./scripts/package-final-distribution.sh",
        "group": "build"
      },
      {
        "label": "üîÑ Update Documentation",
        "type": "shell",
        "command": "./scripts/generate-documentation.sh",
        "group": "build"
      },
      {
        "label": "üéØ Cybersec Tools Test",
        "type": "shell",
        "command": "./tests/cybersec-tools-validation.sh",
        "group": "test"
      }
    ]
  },
  "launch": {
    "version": "0.2.0",
    "configurations": [
      {
        "name": "üîß Debug Kernel",
        "type": "lldb",
        "request": "launch",
        "program": "${workspaceFolder}/target/x86_64-unknown-none/debug/syn-kernel",
        "args": [],
        "cwd": "${workspaceFolder}",
        "preLaunchTask": "üîß Build Kernel"
      },
      {
        "name": "ü§ñ Debug AI Engine",
        "type": "lldb",
        "request": "launch",
        "program": "${workspaceFolder}/target/debug/syn-ai-engine",
        "args": [],
        "cwd": "${workspaceFolder}",
        "preLaunchTask": "ü§ñ Build AI Engine"
      },
      {
        "name": "üõ°Ô∏è Debug Security Framework",
        "type": "lldb",
        "request": "launch",
        "program": "${workspaceFolder}/target/debug/syn-security",
        "args": [],
        "cwd": "${workspaceFolder}",
        "preLaunchTask": "üõ°Ô∏è Build Security Framework"
      },
      {
        "name": "üêç Debug Python Scripts",
        "type": "python",
        "request": "launch",
        "program": "${file}",
        "console": "integratedTerminal",
        "env": {
          "PYTHONPATH": "${workspaceFolder}/scripts/python:${workspaceFolder}/development/tools/python"
        }
      }
    ]
  }
}