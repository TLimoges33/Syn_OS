version: '3.8'

services:
  # NATS Message Bus with JetStream
  nats:
    image: nats:2.10-alpine
    container_name: syn_os_nats
    ports:
      - "4222:4222"
      - "8222:8222"
      - "6222:6222"
    command: [
      "--jetstream",
      "--store_dir=/data",
      "--max_memory_store=1GB",
      "--max_file_store=10GB",
      "--http_port=8222"
    ]
    volumes:
      - nats_data:/data
    networks:
      - syn_os_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: syn_os_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-syn_os}
      POSTGRES_USER: ${POSTGRES_USER:-syn_os_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_SSL_MODE: ${POSTGRES_SSL_MODE:-require}
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/orchestrator/migrations:/docker-entrypoint-initdb.d
    networks:
      - syn_os_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U syn_os_user -d syn_os"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: syn_os_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - syn_os_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Orchestrator (Go)
  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile
    container_name: syn_os_orchestrator
    environment:
      - ENV=docker
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-syn_os}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - HTTP_PORT=${HTTP_PORT:-8080}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - INTERNAL_API_KEY=${INTERNAL_API_KEY}
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consciousness System V2 (Python)
  consciousness:
    build:
      context: .
      dockerfile: Dockerfile.consciousness
    container_name: syn_os_consciousness
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:8080}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CONSCIOUSNESS_MODE=${CONSCIOUSNESS_MODE:-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CONSCIOUSNESS_ENCRYPTION_KEY=${CONSCIOUSNESS_ENCRYPTION_KEY}
      - LM_STUDIO_API_KEY=${LM_STUDIO_API_KEY}
    env_file:
      - .env
    depends_on:
      nats:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    volumes:
      - consciousness_data:/app/data
      - ./src/consciousness_v2:/app/src/consciousness_v2
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8081/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard (Development)
  dashboard:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: syn_os_dashboard
    environment:
      - REACT_APP_ORCHESTRATOR_URL=${REACT_APP_ORCHESTRATOR_URL:-http://localhost:8080}
      - REACT_APP_CONSCIOUSNESS_URL=${REACT_APP_CONSCIOUSNESS_URL:-http://localhost:8081}
      - REACT_APP_API_KEY=${EXTERNAL_API_KEY}
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      - orchestrator
      - consciousness
    networks:
      - syn_os_network
    volumes:
      - ./web:/app
      - /app/node_modules
    restart: unless-stopped

  # Security Dashboard (Python)
  security-dashboard:
    build:
      context: ./applications/security_dashboard
      dockerfile: Dockerfile
    container_name: syn_os_security_dashboard
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - ORCHESTRATOR_URL=${ORCHESTRATOR_URL:-http://orchestrator:8080}
      - CONSCIOUSNESS_URL=${CONSCIOUSNESS_URL:-http://consciousness:8081}
      - SECURITY_DASHBOARD_PORT=${SECURITY_DASHBOARD_PORT:-8083}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SIGNING_KEY=${SIGNING_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    ports:
      - "8083:8083"
    depends_on:
      nats:
        condition: service_healthy
      orchestrator:
        condition: service_healthy
      consciousness:
        condition: service_healthy
    networks:
      - syn_os_network
    restart: unless-stopped
    volumes:
      - ./src:/app/src
      - ./logs/security:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8083/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NATS Monitoring (Optional)
  nats-surveyor:
    image: natsio/nats-surveyor:latest
    container_name: syn_os_nats_surveyor
    environment:
      - NATS_SURVEYOR_SERVER_COUNT=1
    ports:
      - "7777:7777"
    depends_on:
      - nats
    networks:
      - syn_os_network
    restart: unless-stopped

volumes:
  nats_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  consciousness_data:
    driver: local

networks:
  syn_os_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16