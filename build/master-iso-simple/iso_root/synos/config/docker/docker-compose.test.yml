version: '3.8'

services:
  # NATS Message Bus for testing
  nats-test:
    image: nats:2.10-alpine
    container_name: syn_os_nats_test
    ports:
      - "4222:4222"
      - "8222:8222"
    command: [
      "--jetstream",
      "--store_dir=/data",
      "--max_memory_store=256MB",
      "--max_file_store=1GB",
      "--http_port=8222"
    ]
    volumes:
      - nats_test_data:/data
    networks:
      - syn_os_test_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for testing
  postgres-test:
    image: postgres:15-alpine
    container_name: syn_os_postgres_test
    environment:
      POSTGRES_DB: syn_os_test
      POSTGRES_USER: syn_os_test_user
      POSTGRES_PASSWORD: syn_os_test_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - syn_os_test_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U syn_os_test_user -d syn_os_test"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis for testing
  redis-test:
    image: redis:7-alpine
    container_name: syn_os_redis_test
    ports:
      - "6380:6379"
    networks:
      - syn_os_test_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Service Orchestrator for testing
  orchestrator-test:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile
    container_name: syn_os_orchestrator_test
    environment:
      - ENV=test
      - NATS_URL=nats://nats-test:4222
      - POSTGRES_HOST=postgres-test
      - POSTGRES_PORT=5432
      - POSTGRES_DB=syn_os_test
      - POSTGRES_USER=syn_os_test_user
      - POSTGRES_PASSWORD=syn_os_test_password
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
      - HTTP_PORT=8080
      - LOG_LEVEL=debug
      - ENABLE_AUTH=false
    ports:
      - "8080:8080"
    depends_on:
      nats-test:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - syn_os_test_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Consciousness System for testing
  consciousness-test:
    build:
      context: .
      dockerfile: Dockerfile.consciousness
    container_name: syn_os_consciousness_test
    environment:
      - NATS_URL=nats://nats-test:4222
      - ORCHESTRATOR_URL=http://orchestrator-test:8080
      - LOG_LEVEL=DEBUG
      - CONSCIOUSNESS_MODE=test
    depends_on:
      nats-test:
        condition: service_healthy
      orchestrator-test:
        condition: service_healthy
    networks:
      - syn_os_test_network
    volumes:
      - consciousness_test_data:/app/data
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8081/health')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Integration Test Runner
  integration-tests:
    build:
      context: .
      dockerfile: Dockerfile.tests
    container_name: syn_os_integration_tests
    environment:
      - ORCHESTRATOR_URL=http://orchestrator-test:8080
      - CONSCIOUSNESS_URL=http://consciousness-test:8081
      - NATS_URL=nats://nats-test:4222
    depends_on:
      orchestrator-test:
        condition: service_healthy
      consciousness-test:
        condition: service_healthy
    networks:
      - syn_os_test_network
    volumes:
      - ./tests:/app/tests
      - ./src:/app/src
    command: ["python", "-m", "pytest", "/app/tests/integration/", "-v", "--tb=short"]

volumes:
  nats_test_data:
    driver: local
  postgres_test_data:
    driver: local
  consciousness_test_data:
    driver: local

networks:
  syn_os_test_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16