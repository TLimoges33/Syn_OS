#!/bin/bash
set -e

echo "════════════════════════════════════════════════════════════"
echo "  Installing Consciousness Framework"
echo "════════════════════════════════════════════════════════════"

if [[ -d /tmp/synos-staging/consciousness ]]; then
    mkdir -p /opt/synos/consciousness
    cp -r /tmp/synos-staging/consciousness/* /opt/synos/consciousness/

    # Create consciousness service
    cat > /etc/systemd/system/synos-consciousness.service << 'EOF'
[Unit]
Description=SynOS Neural Darwinism Consciousness Engine
After=network.target

[Service]
Type=simple
ExecStart=/usr/bin/python3 /opt/synos/consciousness/consciousness_engine.py
Restart=on-failure
User=root
Environment="PYTHONPATH=/opt/synos/consciousness:/opt/synos/lib"

[Install]
WantedBy=multi-user.target
EOF

    # Create placeholder consciousness engine if none exists
    if [[ ! -f /opt/synos/consciousness/consciousness_engine.py ]]; then
        cat > /opt/synos/consciousness/consciousness_engine.py << 'EOFPY'
#!/usr/bin/env python3
"""SynOS Consciousness Engine - Neural Darwinism Integration"""
import sys
import time
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("SynOS-Consciousness")

class ConsciousnessEngine:
    def __init__(self):
        self.active = False

    def initialize(self):
        logger.info("🧠 Initializing Neural Darwinism Engine...")
        self.active = True
        logger.info("✅ Consciousness engine active")

    def run(self):
        while self.active:
            # Placeholder for consciousness processing
            time.sleep(60)

if __name__ == "__main__":
    engine = ConsciousnessEngine()
    engine.initialize()
    engine.run()
EOFPY
        chmod +x /opt/synos/consciousness/consciousness_engine.py
    fi

    systemctl enable synos-consciousness.service || true
    echo "✅ Consciousness framework installed"
else
    echo "⚠️  Consciousness staging not found - skipping"
fi

exit 0
