#!/bin/bash
set -e

echo "════════════════════════════════════════════════════════════"
echo "  Configuring SynOS Services & System Integration"
echo "════════════════════════════════════════════════════════════"

# Create SynOS system user and group
echo "Creating SynOS system user..."
useradd -r -s /bin/false -d /var/lib/synos -c "SynOS AI System" synos 2>/dev/null || true
usermod -aG sudo synos 2>/dev/null || true
echo "✓ SynOS user created"

# Create directory structure
echo "Creating system directories..."
mkdir -p /etc/synos/{ai,security,consciousness,services}
mkdir -p /var/lib/synos/{ai,models,consciousness,security,data}
mkdir -p /var/log/synos/{ai,security,consciousness,services}
mkdir -p /opt/synos

# Set ownership
chown -R synos:synos /var/lib/synos /var/log/synos /etc/synos
chmod 755 /opt/synos
chmod 750 /etc/synos
chmod 750 /var/lib/synos
echo "✓ Directories created and secured"

################################################################################
# DEPLOY CONFIGURATION FILES
################################################################################

echo "Deploying SynOS configuration files..."

# AI Engine Configuration
cat > /etc/synos/ai/ai-engine.conf << 'EOFCONF'
# SynOS AI Engine Configuration
[core]
enable_consciousness = true
model_path = /opt/synos/models
data_path = /var/lib/synos/ai
log_path = /var/log/synos/ai
log_level = INFO

[neural_darwinism]
enable = true
population_size = 1000
selection_pressure = 0.7
mutation_rate = 0.01
learning_rate = 0.001

[hardware]
enable_gpu = true
enable_tpu = false
enable_npu = false
cpu_threads = 0  # 0 = auto-detect

[models]
tensorflow_lite = /opt/synos/models/tensorflow
onnx = /opt/synos/models/onnx
pytorch = /opt/synos/models/pytorch

[features]
adaptive_learning = true
threat_detection = true
resource_optimization = true
user_profiling = true
EOFCONF

# Security Configuration
cat > /etc/synos/security/security.conf << 'EOFCONF'
# SynOS Security Framework Configuration
[security]
enable_threat_detection = true
enable_deception_tech = true
enable_container_security = true
alert_level = MEDIUM
log_all_events = true

[access_control]
enforce_mac = true
enforce_rbac = true
enable_capabilities = true
default_deny = true

[monitoring]
enable_realtime = true
scan_interval = 60
alert_threshold = HIGH

[deception]
enable_honey_tokens = true
enable_decoy_services = true
enable_honey_files = true

[threat_intel]
enable_feed = true
update_interval = 3600
confidence_threshold = 0.7
EOFCONF

# Consciousness Configuration
cat > /etc/synos/consciousness/consciousness.conf << 'EOFCONF'
# SynOS Consciousness Engine Configuration
[consciousness]
enable = true
mode = full
state_persistence = true
state_path = /var/lib/synos/consciousness

[awareness]
system_monitoring = true
user_behavior = true
threat_awareness = true
resource_awareness = true

[decision_making]
enable_autonomous = true
confidence_threshold = 0.8
human_in_loop = false

[learning]
continuous_learning = true
experience_replay = true
model_update_interval = 86400
EOFCONF

# Services Configuration
cat > /etc/synos/services/services.conf << 'EOFCONF'
# SynOS Services Configuration
[api]
enable = true
port = 8080
bind_address = 127.0.0.1

[web_interface]
enable = true
port = 8443
ssl = true

[monitoring]
prometheus_port = 9090
grafana_port = 3000
EOFCONF

echo "✓ Configuration files deployed to /etc/synos/"

################################################################################
# CREATE SYSTEMD SERVICES
################################################################################

echo "Creating SystemD service files..."

# AI Engine Service
cat > /etc/systemd/system/synos-ai-engine.service << 'EOFSVC'
[Unit]
Description=SynOS AI Consciousness Engine
Documentation=https://synos.dev/docs/ai-engine
After=network.target
Wants=network-online.target

[Service]
Type=simple
User=synos
Group=synos
WorkingDirectory=/opt/synos
ExecStart=/opt/synos/bin/synos-ai-engine --config /etc/synos/ai/ai-engine.conf
ExecReload=/bin/kill -HUP $MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=synos-ai-engine

# Security hardening
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/var/lib/synos /var/log/synos /opt/synos/models

[Install]
WantedBy=multi-user.target
EOFSVC

# Security Monitor Service
cat > /etc/systemd/system/synos-security-monitor.service << 'EOFSVC'
[Unit]
Description=SynOS Security Monitor & Threat Detection
Documentation=https://synos.dev/docs/security
After=network.target synos-ai-engine.service
Requires=synos-ai-engine.service

[Service]
Type=simple
User=synos
Group=synos
WorkingDirectory=/opt/synos
ExecStart=/opt/synos/bin/synos-security-orchestrator --config /etc/synos/security/security.conf
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=synos-security

# Security hardening
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ReadWritePaths=/var/lib/synos /var/log/synos

[Install]
WantedBy=multi-user.target
EOFSVC

# Consciousness Service
cat > /etc/systemd/system/synos-consciousness.service << 'EOFSVC'
[Unit]
Description=SynOS Consciousness Layer
Documentation=https://synos.dev/docs/consciousness
After=network.target synos-ai-engine.service
PartOf=synos-ai-engine.service

[Service]
Type=simple
User=synos
Group=synos
WorkingDirectory=/opt/synos
ExecStart=/opt/synos/bin/synos-consciousness --config /etc/synos/consciousness/consciousness.conf
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=synos-consciousness

[Install]
WantedBy=multi-user.target
EOFSVC

# Web Interface Service (if binary exists)
cat > /etc/systemd/system/synos-web-interface.service << 'EOFSVC'
[Unit]
Description=SynOS Web Management Interface
Documentation=https://synos.dev/docs/web-interface
After=network.target synos-ai-engine.service

[Service]
Type=simple
User=synos
Group=synos
WorkingDirectory=/opt/synos
ExecStart=/opt/synos/bin/synos-web-interface --config /etc/synos/services/services.conf
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=synos-web

[Install]
WantedBy=multi-user.target
EOFSVC

echo "✓ SystemD service files created"

# Reload systemd
systemctl daemon-reload

# Enable services (they'll start on boot)
echo "Enabling SynOS services..."
systemctl enable synos-ai-engine.service 2>/dev/null || echo "  (will enable when binary is present)"
systemctl enable synos-security-monitor.service 2>/dev/null || echo "  (will enable when binary is present)"
systemctl enable synos-consciousness.service 2>/dev/null || echo "  (will enable when binary is present)"
systemctl enable synos-web-interface.service 2>/dev/null || echo "  (will enable when binary is present)"
echo "✓ Services enabled for auto-start"

################################################################################
# CREATE SYNPKG WRAPPER
################################################################################

echo "Creating SynPkg package manager..."

cat > /usr/local/bin/synpkg << 'EOFSYNPKG'
#!/bin/bash
# SynOS Package Manager - Wrapper around APT with SynOS enhancements

VERSION="1.0.0"
SYNOS_REPO="/opt/synos/packages"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_header() {
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${NC}         ${GREEN}SynPkg${NC} - SynOS Package Manager v${VERSION}         ${BLUE}║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════╝${NC}"
}

case "$1" in
    update)
        print_header
        echo -e "${YELLOW}→${NC} Updating package lists..."
        sudo apt-get update
        ;;
    upgrade)
        print_header
        echo -e "${YELLOW}→${NC} Upgrading packages..."
        sudo apt-get upgrade -y
        ;;
    install)
        print_header
        if [ -z "$2" ]; then
            echo -e "${RED}✗${NC} Error: Package name required"
            echo "Usage: synpkg install <package>"
            exit 1
        fi
        echo -e "${YELLOW}→${NC} Installing $2..."
        sudo apt-get install -y "$2"
        ;;
    remove)
        print_header
        if [ -z "$2" ]; then
            echo -e "${RED}✗${NC} Error: Package name required"
            exit 1
        fi
        echo -e "${YELLOW}→${NC} Removing $2..."
        sudo apt-get remove -y "$2"
        ;;
    search)
        print_header
        if [ -z "$2" ]; then
            echo -e "${RED}✗${NC} Error: Search term required"
            exit 1
        fi
        echo -e "${YELLOW}→${NC} Searching for $2..."
        apt-cache search "$2"
        ;;
    info)
        if [ -z "$2" ]; then
            echo -e "${RED}✗${NC} Error: Package name required"
            exit 1
        fi
        apt-cache show "$2"
        ;;
    list-tools)
        print_header
        echo -e "${GREEN}Security Tools Installed:${NC}"
        echo ""
        dpkg -l | grep -E "metasploit|burp|nmap|wireshark|sqlmap|hydra|john|hashcat|aircrack|nikto|dirb|gobuster|masscan" | awk '{print "  • " $2}'
        ;;
    list-synos)
        print_header
        echo -e "${GREEN}SynOS Components Installed:${NC}"
        echo ""
        ls -1 /opt/synos/bin/ 2>/dev/null | awk '{print "  • " $1}' || echo "  (none yet)"
        ;;
    status)
        print_header
        echo -e "${GREEN}SynOS Services Status:${NC}"
        echo ""
        systemctl status synos-*.service --no-pager | grep -E "Loaded:|Active:" | head -20
        ;;
    version)
        print_header
        ;;
    *)
        print_header
        echo ""
        echo -e "${GREEN}Usage:${NC}"
        echo "  synpkg update                - Update package lists"
        echo "  synpkg upgrade               - Upgrade all packages"
        echo "  synpkg install <package>     - Install a package"
        echo "  synpkg remove <package>      - Remove a package"
        echo "  synpkg search <term>         - Search for packages"
        echo "  synpkg info <package>        - Show package information"
        echo "  synpkg list-tools            - List installed security tools"
        echo "  synpkg list-synos            - List SynOS components"
        echo "  synpkg status                - Show SynOS services status"
        echo ""
        echo -e "${BLUE}For standard APT commands, use apt directly.${NC}"
        ;;
esac
EOFSYNPKG

chmod +x /usr/local/bin/synpkg
echo "✓ SynPkg package manager installed"

echo "════════════════════════════════════════════════════════════"
echo "  ✅ SynOS Services & Configuration Complete"
echo "════════════════════════════════════════════════════════════"

exit 0
