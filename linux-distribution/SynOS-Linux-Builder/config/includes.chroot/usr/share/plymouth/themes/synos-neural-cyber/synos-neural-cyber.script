// ═══════════════════════════════════════════════════════════════════════════
// SynOS Neural-Cyber Boot Splash
// Phase 1: Organic Neural Network (0-3s) → Phase 2: Cyberpunk Hacker (3s+)
// Color Scheme: True Black (#000000), Scarlet (#DC143C), White (#FFFFFF)
// ═══════════════════════════════════════════════════════════════════════════

// ──────────────────────────────────────────────────────────────────────────
// INITIALIZATION
// ──────────────────────────────────────────────────────────────────────────

// Screen dimensions
screen_width = Window.GetWidth();
screen_height = Window.GetHeight();

// Color definitions (RGB 0-1 scale)
color_black = [0.0, 0.0, 0.0];           // #000000
color_scarlet = [0.86, 0.08, 0.24];      // #DC143C
color_bright_scarlet = [1.0, 0.14, 0.0]; // #FF2400
color_white = [1.0, 1.0, 1.0];           // #FFFFFF
color_gray = [0.88, 0.88, 0.88];         // #E0E0E0

// Timing
start_time = 0;
phase_transition_time = 3.0; // 3 seconds for phase 1

// ──────────────────────────────────────────────────────────────────────────
// BACKGROUND
// ──────────────────────────────────────────────────────────────────────────

Window.SetBackgroundTopColor(color_black[0], color_black[1], color_black[2]);
Window.SetBackgroundBottomColor(color_black[0], color_black[1], color_black[2]);

// ──────────────────────────────────────────────────────────────────────────
// LOGO
// ──────────────────────────────────────────────────────────────────────────

logo_image = Image("synos-logo-256.png");
logo_sprite = Sprite(logo_image);
logo_sprite.SetPosition(
    screen_width / 2 - logo_image.GetWidth() / 2,
    screen_height / 2 - logo_image.GetHeight() / 2,
    10000
);
logo_sprite.SetOpacity(0); // Start transparent

// ──────────────────────────────────────────────────────────────────────────
// NEURAL NETWORK PARTICLES (Phase 1: Organic)
// ──────────────────────────────────────────────────────────────────────────

// Create neural nodes (scarlet dots)
neural_nodes = [];
for (i = 0; i < 20; i++) {
    node = [];
    node.image = Image.Text("●", color_scarlet[0], color_scarlet[1], color_scarlet[2]);
    node.sprite = Sprite(node.image);
    node.x = Math.Random() * screen_width;
    node.y = Math.Random() * screen_height;
    node.vx = (Math.Random() - 0.5) * 2; // velocity
    node.vy = (Math.Random() - 0.5) * 2;
    node.sprite.SetPosition(node.x, node.y, 5000);
    node.sprite.SetOpacity(0);
    neural_nodes[i] = node;
}

// ──────────────────────────────────────────────────────────────────────────
// CYBERPUNK ELEMENTS (Phase 2: Hacker)
// ──────────────────────────────────────────────────────────────────────────

// Scanning lines (horizontal scarlet lines)
scan_lines = [];
for (i = 0; i < 3; i++) {
    line = [];
    line.image = Image("scan-line.png"); // We'll create this
    line.sprite = Sprite(line.image);
    line.y = -50;
    line.sprite.SetPosition(0, line.y, 6000);
    line.sprite.SetOpacity(0);
    scan_lines[i] = line;
}

// Matrix-style code rain particles
matrix_particles = [];
for (i = 0; i < 30; i++) {
    particle = [];
    particle.char = Math.Random() > 0.5 ? "0" : "1";
    particle.image = Image.Text(particle.char, color_scarlet[0], color_scarlet[1], color_scarlet[2]);
    particle.sprite = Sprite(particle.image);
    particle.x = Math.Random() * screen_width;
    particle.y = -20;
    particle.speed = 2 + Math.Random() * 5;
    particle.sprite.SetPosition(particle.x, particle.y, 4000);
    particle.sprite.SetOpacity(0);
    matrix_particles[i] = particle;
}

// ──────────────────────────────────────────────────────────────────────────
// PROGRESS BAR
// ──────────────────────────────────────────────────────────────────────────

progress_bar_width = 400;
progress_bar_height = 4;
progress_bar_x = screen_width / 2 - progress_bar_width / 2;
progress_bar_y = screen_height / 2 + 150;

// Background bar (dark)
progress_bg = Image("progress-bg.png");
progress_bg_sprite = Sprite(progress_bg);
progress_bg_sprite.SetPosition(progress_bar_x, progress_bar_y, 8000);
progress_bg_sprite.SetOpacity(0);

// Foreground bar (scarlet)
progress_fg = Image("progress-fg.png");
progress_fg_sprite = Sprite(progress_fg);
progress_fg_sprite.SetPosition(progress_bar_x, progress_bar_y, 9000);
progress_fg_sprite.SetOpacity(0);

// ──────────────────────────────────────────────────────────────────────────
// BOOT LOG DISPLAY (Upper Right Corner - 15 lines)
// ──────────────────────────────────────────────────────────────────────────

log_lines = [];
log_max_lines = 15;
log_x = screen_width - 600; // 600px from right edge
log_y = 20; // 20px from top
log_line_height = 18;

for (i = 0; i < log_max_lines; i++) {
    line = [];
    line.image = NULL;
    line.sprite = Sprite();
    line.sprite.SetPosition(log_x, log_y + (i * log_line_height), 15000);
    log_lines[i] = line;
}

// ──────────────────────────────────────────────────────────────────────────
// ANIMATION CALLBACK
// ──────────────────────────────────────────────────────────────────────────

fun refresh_callback() {
    current_time = Plymouth.GetTime() - start_time;

    // ─────────────────────────────────────────────────────────────────────
    // LOGO FADE IN (0-3s)
    // ─────────────────────────────────────────────────────────────────────

    if (current_time < phase_transition_time) {
        // Fade in logo during phase 1
        opacity = current_time / phase_transition_time;
        logo_sprite.SetOpacity(opacity);
    } else {
        // Fully opaque in phase 2
        logo_sprite.SetOpacity(1.0);
    }

    // ─────────────────────────────────────────────────────────────────────
    // PHASE 1: ORGANIC NEURAL NETWORK (0-3s)
    // ─────────────────────────────────────────────────────────────────────

    if (current_time < phase_transition_time) {
        phase1_progress = current_time / phase_transition_time;

        // Animate neural nodes (organic movement)
        for (i = 0; i < 20; i++) {
            node = neural_nodes[i];

            // Fade in nodes
            node.sprite.SetOpacity(phase1_progress * 0.7);

            // Organic pulsing movement
            pulse = Math.Sin(current_time * 2 + i * 0.5) * 3;
            node.x = node.x + node.vx + pulse * 0.3;
            node.y = node.y + node.vy + pulse * 0.3;

            // Wrap around screen edges
            if (node.x < 0) node.x = screen_width;
            if (node.x > screen_width) node.x = 0;
            if (node.y < 0) node.y = screen_height;
            if (node.y > screen_height) node.y = 0;

            node.sprite.SetPosition(node.x, node.y, 5000);
        }

        // Hide phase 2 elements
        for (i = 0; i < 3; i++) {
            scan_lines[i].sprite.SetOpacity(0);
        }
        for (i = 0; i < 30; i++) {
            matrix_particles[i].sprite.SetOpacity(0);
        }
    }

    // ─────────────────────────────────────────────────────────────────────
    // PHASE 2: CYBERPUNK HACKER (3s+)
    // ─────────────────────────────────────────────────────────────────────

    else {
        phase2_time = current_time - phase_transition_time;

        // Fade out neural nodes
        for (i = 0; i < 20; i++) {
            fade_out = 1.0 - Math.Min(phase2_time / 1.0, 1.0);
            neural_nodes[i].sprite.SetOpacity(fade_out * 0.7);
        }

        // Scanning lines animation
        for (i = 0; i < 3; i++) {
            line = scan_lines[i];
            line.y = line.y + 3 + i; // Different speeds
            if (line.y > screen_height) {
                line.y = -50;
            }
            line.sprite.SetPosition(0, line.y, 6000);
            line.sprite.SetOpacity(0.3);
        }

        // Matrix code rain
        for (i = 0; i < 30; i++) {
            particle = matrix_particles[i];
            particle.y = particle.y + particle.speed;
            if (particle.y > screen_height) {
                particle.y = -20;
                particle.x = Math.Random() * screen_width;
            }
            particle.sprite.SetPosition(particle.x, particle.y, 4000);
            particle.sprite.SetOpacity(0.6);
        }

        // Show progress bar
        progress_bg_sprite.SetOpacity(0.5);
        progress_fg_sprite.SetOpacity(1.0);
    }
}

Plymouth.SetRefreshFunction(refresh_callback);

// ──────────────────────────────────────────────────────────────────────────
// BOOT PROGRESS
// ──────────────────────────────────────────────────────────────────────────

fun progress_callback(duration, progress) {
    if (progress_fg.GetWidth() > 0) {
        // Scale progress bar based on boot progress
        new_width = progress_bar_width * progress;
        progress_fg_sprite.SetImage(progress_fg.Scale(new_width, progress_bar_height));
    }
}

Plymouth.SetBootProgressFunction(progress_callback);

// ──────────────────────────────────────────────────────────────────────────
// BOOT MESSAGES (Upper Right Corner Log)
// ──────────────────────────────────────────────────────────────────────────

message_queue = [];
message_count = 0;

fun message_callback(text) {
    // Add message to queue
    message_queue[message_count] = text;
    message_count++;

    // Keep only last 15 messages
    start_index = 0;
    if (message_count > log_max_lines) {
        start_index = message_count - log_max_lines;
    }

    // Update log display
    for (i = 0; i < log_max_lines; i++) {
        msg_index = start_index + i;
        if (msg_index < message_count) {
            // Create text image with white color and monospace font
            log_lines[i].image = Image.Text(
                message_queue[msg_index],
                color_white[0],
                color_white[1],
                color_white[2],
                1.0,
                "monospace 10"
            );
            log_lines[i].sprite.SetImage(log_lines[i].image);
            log_lines[i].sprite.SetOpacity(0.9);
        }
    }
}

Plymouth.SetMessageFunction(message_callback);

// ──────────────────────────────────────────────────────────────────────────
// PASSWORD PROMPT (if needed for encrypted disk)
// ──────────────────────────────────────────────────────────────────────────

fun display_password_callback(prompt, bullets) {
    // Display prompt in center-bottom
    prompt_image = Image.Text(prompt, color_white[0], color_white[1], color_white[2]);
    prompt_sprite = Sprite(prompt_image);
    prompt_sprite.SetPosition(
        screen_width / 2 - prompt_image.GetWidth() / 2,
        screen_height - 100,
        20000
    );

    // Display bullets (password masking)
    bullets_text = "";
    for (i = 0; i < bullets; i++) {
        bullets_text += "●";
    }
    bullets_image = Image.Text(bullets_text, color_scarlet[0], color_scarlet[1], color_scarlet[2]);
    bullets_sprite = Sprite(bullets_image);
    bullets_sprite.SetPosition(
        screen_width / 2 - bullets_image.GetWidth() / 2,
        screen_height - 70,
        20000
    );
}

Plymouth.SetDisplayPasswordFunction(display_password_callback);

// ──────────────────────────────────────────────────────────────────────────
// QUIT/SHUTDOWN
// ──────────────────────────────────────────────────────────────────────────

fun quit_callback() {
    // Fade everything to black on shutdown
    logo_sprite.SetOpacity(0);
}

Plymouth.SetQuitFunction(quit_callback);
